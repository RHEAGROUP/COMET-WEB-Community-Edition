<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor 
@inject NavigationManager NavigationManager

@if (ModelSetups.Count == 0)
{
    InitializeModelList();
}

<div class="form-group row">
    <label>Model:</label>
    <div class="col-md-15 m-top-3px">
        <select @onchange="SetNameModel">
            <option value="">--Select--</option>
            @foreach (var model in ModelSetups)
            {
                <option value="@model.Name">@model.Name</option>
            }
        </select>
    </div>
</div>

@if (SelectedEngineeringModelSetup != null)
{
   <div class="form-group row">
    <label>Iteration:</label>
    <div class="col-md-15 m-top-3px">
        <select @onchange="SetIteration">
            <option value="">--Select--</option>
            @foreach(var iteration in this.SelectedEngineeringModelSetup.IterationSetup)
            {
                    @if(@iteration.FrozenOn == null)
                    {
                        <option value="@iteration.IterationNumber">iteration_@iteration.IterationNumber - Active</option>
                    } else
                    {
                        <option value="@iteration.IterationNumber">iteration_@iteration.IterationNumber - @iteration.FrozenOn</option>
                    }
            }
        </select>
    </div>
</div>
}
@if (Domains.Count != 0)
{
   <div class="form-group row">
    <label>Domain:</label>
    <div class="col-md-15 m-top-3px">
        <select @onchange="SetDomain">
            <option value="">--Select--</option>
            @foreach(var domain in Domains)
            {
                <option value="@domain.Name">@domain.Name</option>
            }
        </select>
    </div>
</div>
}

@if (SelectedEngineeringModelSetup != null && SelectedIterationSetup != null && ISessionAnchor.CurrentDomainOfExpertise != null)
{
    <div class="row">
        <button class="btn btn-connect " @onclick="OpenAModel"> Open</button>
    </div>
}

@code {

    /// <summary>
    /// List of <see cref="EngineeringModelSetup"/> in the opened session
    /// </summary>
    private List<EngineeringModelSetup> ModelSetups { get; set; } = new List<EngineeringModelSetup>();

    /// <summary>
    /// List of <see cref="DomainOfExpertise"/> in the selected <see cref="EngineeringModelSetup"/>
    /// </summary>
    private List<DomainOfExpertise> Domains { get; set; } = new List<DomainOfExpertise>();

    /// <summary>
    /// The <see cref="EngineeringModelSetup"/> selected
    /// </summary>
    private EngineeringModelSetup SelectedEngineeringModelSetup { get; set; }

    /// <summary>
    /// The <see cref="IterationSetup"/> selected
    /// </summary>
    private IterationSetup  SelectedIterationSetup { get; set; }

    /// <summary>
    /// Initialize <see cref="ModelSetups"/> according to the opened Session and the <see cref="ActivePerson"/>
    /// </summary>
    private void InitializeModelList()
    {
        this.ModelSetups.AddRange(this.ISessionAnchor.GetParticipantModels());
    }

    /// <summary>
    /// Initialize <see cref="Domains"/> and <see cref="IterationSetupList"/> according to the selected <see cref="SelectedEngineeringModelSetup"/>
    /// </summary>
    /// <param name="e"> Event emmited when a ModelSetup is selected </param>
    private void SetNameModel(ChangeEventArgs e)
    {
        foreach (var model in ISessionAnchor.GetSiteDirectory().Model)
        {
            if (model.Name.Equals(e.Value.ToString()))
            {
                this.SelectedEngineeringModelSetup = model;
                this.Domains.AddRange(ISessionAnchor.GetModelDomains(this.SelectedEngineeringModelSetup));
            }
        }
    }

    /// <summary>
    /// Set the <see cref="CurrentDomainOfExpertise"/> of the <see cref="ISessionAnchor"/>
    /// </summary>
    /// <param name="e">Event emitted when a domain is selected</param>
    private void SetDomain(ChangeEventArgs e)
    {
        foreach (var domain in this.Domains)
        {
            if (domain.Name.Equals(e.Value.ToString()))
            {
                this.ISessionAnchor.CurrentDomainOfExpertise = domain;
            }
        }
    }

    /// <summary>
    /// Set the <see cref="IterationSetup"/>
    /// </summary>
    /// <param name="e">Event emitted when an iteration is selected</param>
    private void SetIteration(ChangeEventArgs e)
    {
        foreach (var iteration in this.SelectedEngineeringModelSetup.IterationSetup)
        {
            if (iteration.IterationNumber.ToString().Equals(e.Value.ToString()))
            {
                this.SelectedIterationSetup = iteration;
            }
        }
    }

    /// <summary>
    /// Open the <see cref="EngineeringModel"/> with selected <see cref="SelectedEngineeringModelSetup"/>, <see cref="IterationSetup"/> and <see cref="CurrentDomainOfExpertise"/>
    /// </summary>
    public async void OpenAModel()
    {
        await this.ISessionAnchor.GetIteration(this.SelectedEngineeringModelSetup, this.SelectedIterationSetup);

        NavigationManager.NavigateTo(Path.Combine("/",this.SelectedEngineeringModelSetup.Name));
    }
}
