<!------------------------------------------------------------------------------
// Copyright (c) 2023 RHEA System S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, Nabil Abbar
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.Utilities
@using COMETwebapp.Extensions
@using COMET.Web.Common.Components.BookEditor
@using CDP4Common.ReportingData
@inherits SingleIterationApplicationBase<COMETwebapp.ViewModels.Components.BookEditor.IBookEditorBodyViewModel>

<LoadingComponent IsVisible="this.ViewModel.IsLoading">

    <DxPopup @bind-Visible="@this.ViewModel.IsOnCreateMode" CloseOnOutsideClick="false" ShowCloseButton="true" ShowFooter="true" HeaderText="@this.GetHeaderText()">
        <Content>
            <InputEditor Item="@this.ViewModel.ThingToCreate" ActiveDomains="@this.ViewModel.ActiveDomains" AvailableCategories="@this.ViewModel.AvailableCategories" />
        </Content>
        <FooterTemplate>
            <div class="modal-footer">
                <DxButton Text="OK" RenderStyle="ButtonRenderStyle.Primary" Click="@this.ViewModel.OnCreateThing" />
                <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Danger" Click="@(() => this.ViewModel.IsOnCreateMode = false)" />
            </div>
        </FooterTemplate>
    </DxPopup>
    
    <DxPopup @bind-Visible="@this.ViewModel.IsOnEditMode" CloseOnOutsideClick="false" ShowCloseButton="true" ShowFooter="true" HeaderText="@this.GetHeaderText()">
        <Content>
            <InputEditor Item="@this.ViewModel.ThingToEdit" ActiveDomains="@this.ViewModel.ActiveDomains" AvailableCategories="@this.ViewModel.AvailableCategories"/>
        </Content>
        <FooterTemplate>
            <div class="modal-footer">
                <DxButton Text="OK" RenderStyle="ButtonRenderStyle.Primary" Click="@this.ViewModel.OnEditThing" />
                <DxButton Text="Cancel" RenderStyle="ButtonRenderStyle.Danger" Click="@(() => this.ViewModel.IsOnEditMode = false)" />
            </div>
        </FooterTemplate>
    </DxPopup>

    <div id="@WebAppConstantValues.ModelDashboardPage.QueryPageBodyName()" class="book-editor-body">

        <BookEditorColumn TItem="Book" HeaderHexColor="#eba434" HeaderTitle="Books"
                          Items="@this.ViewModel.AvailableBooks.Items.ToList()"
                          @bind-SelectedValue="@this.ViewModel.SelectedBook"
                          DrawLeftLines="false"
                          IsCollapsed="@this.IsBooksColumnCollapsed"
                          CollapseButtonIconClass="no-display"
                          CssClass="book-nodes"
                          OnCreateNewItemClick="@(() => this.ViewModel.SetThingToCreate(new Book()))"
                          OnEditClicked="@((b) => this.ViewModel.SetThingToEdit(b))"
                          OnDeleteClicked="@this.ViewModel.OnDeleteThing">
            <ContentTemplate>
                @context.Name
            </ContentTemplate>
        </BookEditorColumn>

        <BookEditorColumn TItem="Section" HeaderHexColor="#56bd08" HeaderTitle="Sections"
                          Items="@this.ViewModel.SelectedBook?.Section.ToList()"
                          @bind-SelectedValue="@this.ViewModel.SelectedSection"
                          IsCollapsed="@this.IsSectionColumnCollapsed"
                          OnCollapseClicked="@(() => this.IsBooksColumnCollapsed = !this.IsBooksColumnCollapsed)"
                          CollapseButtonIconClass="@(this.IsBooksColumnCollapsed ? "icon-arrow-right" : "icon-arrow-left")"
                          CssClass="section-nodes"
                          OnCreateNewItemClick="@(() => this.ViewModel.SetThingToCreate(new Section()))"
                          OnEditClicked="@((s) => this.ViewModel.SetThingToEdit(s))"
                          OnDeleteClicked="@this.ViewModel.OnDeleteThing">
            <ContentTemplate>
                @context.Name
            </ContentTemplate>
        </BookEditorColumn>

        <BookEditorColumn TItem="Page" HeaderHexColor="#51dded" HeaderTitle="Pages"
                          Items="@this.ViewModel.SelectedSection?.Page.ToList()"
                          @bind-SelectedValue="@this.ViewModel.SelectedPage"
                          IsCollapsed="@this.IsPageColumnCollapsed"
                          OnCollapseClicked="@(() => this.IsSectionColumnCollapsed = !this.IsSectionColumnCollapsed)"
                          CollapseButtonIconClass="@(this.IsSectionColumnCollapsed ? "icon-arrow-right" : "icon-arrow-left")"
                          CssClass="page-nodes"
                          OnCreateNewItemClick="@(() => this.ViewModel.SetThingToCreate(new Page()))"
                          OnEditClicked="@((p) => this.ViewModel.SetThingToEdit(p))"
                          OnDeleteClicked="@this.ViewModel.OnDeleteThing">
            <ContentTemplate>
                @context.Name
            </ContentTemplate>
        </BookEditorColumn>

        <BookEditorColumn TItem="Note" HeaderHexColor="#eb6075" HeaderTitle="Notes"
                          Items="@this.ViewModel.SelectedPage?.Note.ToList()"
                          OnCollapseClicked="@(() => this.IsPageColumnCollapsed = !this.IsPageColumnCollapsed)"
                          CollapseButtonIconClass="@(this.IsPageColumnCollapsed ? "icon-arrow-right" : "icon-arrow-left")"
                          CssClass="note-nodes"
                          OnCreateNewItemClick="@(() => this.ViewModel.SetThingToCreate(new TextualNote(){ LanguageCode = "es" }))"
                          OnEditClicked="@((n) => this.ViewModel.SetThingToEdit(n))"
                          OnDeleteClicked="@this.ViewModel.OnDeleteThing">
            <ContentTemplate>
                @if (context is TextualNote textualNote)
                {
                    @textualNote.Content
                }
                else
                {
                    @context.Name
                }
            </ContentTemplate>
        </BookEditorColumn>
    </div>
</LoadingComponent>