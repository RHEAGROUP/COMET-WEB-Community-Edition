<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@inject ISessionAnchor ISessionAnchor
@using DevExpress.Blazor

<DxChart Data="@GetChartData(Data)" CustomizeSeriesPoint="@CustomizeSeriesPoint">
    <DxChartDonutSeries Filter="@((DataChart d) => d.Argument.Equals("Published values as default") || d.Argument.Equals("Other values"))"
                    ValueField="@(d => d.Value)"
                    ArgumentField="@(d => d.Argument)"
                    AggregationMethod="Enumerable.Sum">
        <DxChartSeriesLabel Visible="true" />
    </DxChartDonutSeries>
    <DxChartLegend AllowToggleSeries="true" Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalEdge.Bottom" Position="RelativePosition.Inside" />
    <DxChartDonutSeries Filter="@((DataChart d) => d.Argument.Equals("Published parameters") || d.Argument.Equals("Publishable parameters"))"
                      ValueField="@(d => d.Value)"
                      ArgumentField="@(d => d.Argument)"
                      AggregationMethod="Enumerable.Sum">
        <DxChartSeriesLabel Visible="true" />
    </DxChartDonutSeries>
</DxChart>

@code {
    /// <summary>
    /// Data in the graph
    /// </summary>
    [Parameter]
    public List<ParameterValueSet> Data { get; set; }

    /// <summary>
    /// Set the color appearence for the donut chart
    /// </summary>
    /// <param name="settings">Settings associated with the series point</param>
    protected void CustomizeSeriesPoint(ChartSeriesPointCustomizationSettings settings) {
        if (settings.Point.Argument.ToString().Equals("Published parameters")){
            settings.PointAppearance.Color = System.Drawing.Color.SkyBlue;
        }else if (settings.Point.Argument.ToString().Equals("Publishable parameters"))
        {
            settings.PointAppearance.Color = System.Drawing.Color.LightCoral;
        } else if (settings.Point.Argument.ToString().Equals("Published values as default"))
        {
            settings.PointAppearance.Color = System.Drawing.Color.DarkSeaGreen;
        } else if (settings.Point.Argument.ToString().Equals("Other values"))
        {
            settings.PointAppearance.Color = System.Drawing.Color.LightSlateGray;
        }
    }

    /// <summary>
    /// Initialize <see cref="DataChart"> list from data to represent in the grpah
    /// </summary>
    /// <param name="data">List of <see cref="ParameterValueSet"> to represent in the graph </param>
    /// <returns>List of <see cref="DataChart"> used in the graph</returns>
    private List<DataChart> GetChartData(List<ParameterValueSet> data)
    {
        List<DataChart> donutData = new List<DataChart>();
        if (ISessionAnchor.OpenIteration != null)
        {
            var domains = ISessionAnchor.Session.QueryDomainOfExpertise(ISessionAnchor.OpenIteration).ToList();
            domains.ForEach(d =>
            {
                var domainParameterValueSets = data.FindAll(parameterValueSet => parameterValueSet.Owner == d);

                var nbDefaultValues = domainParameterValueSets.Count(p => p.Published.Count(el => !el.Equals("-")) == 0);
                donutData.Add(new DataChart()
                {
                    Value = nbDefaultValues,
                    Argument = "Published values as default",
                    Domain = d.ShortName
                });
                donutData.Add(new DataChart()
                {
                    Value = domainParameterValueSets.Count - nbDefaultValues,
                    Argument = "Other values",
                    Domain = d.ShortName
                });

                var publishedParameters = domainParameterValueSets.Count(p => p.Published.SequenceEqual(p.ActualValue));
                donutData.Add(new DataChart()
                {
                    Value = publishedParameters,
                    Argument = "Published parameters",
                    Domain = d.ShortName
                });
                donutData.Add(new DataChart()
                {
                    Value = domainParameterValueSets.Count - publishedParameters,
                    Argument = "Publishable parameters",
                    Domain = d.ShortName
                });
            });
        }
        return donutData;
    }
}
