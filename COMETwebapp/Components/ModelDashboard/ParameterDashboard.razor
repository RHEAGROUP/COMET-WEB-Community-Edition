<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@inject ISessionAnchor ISessionAnchor
@inject IIterationService IterationService
@implements IDisposable

<div class="container-fluid">
    <div class="row align-items-center justify-content-center">
        <DonutDashboard Data="Filter(Data)" />
    </div>
    <div class="row m-top-10px">
        <div class="col text-align-center">
            <PublishedParameters Data="Filter(Data)" FilterOption="@FilterOption" FilterState="@FilterState" FilterParameterType="@FilterParameterType" /> 
        </div>
        <div class="col text-align-center">
            <DefaultValues Data="Filter(Data)" FilterOption="@FilterOption" FilterState="@FilterState" FilterParameterType="@FilterParameterType"/>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// <see cref="Guid"> of the option to filter the data 
    /// </summary>
    [Parameter]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// <see cref="Guid"> of the state to filter the data
    /// </summary>
    [Parameter]
    public Guid? FilterState { get; set; }

    /// <summary>
    /// <see cref="Guid"> of the state to filter the data
    /// </summary>
    [Parameter]
    public string? FilterParameterType { get; set; }

    /// <summary>
    /// ParameterValueSet represented in graphs
    /// </summary>
    public List<ParameterValueSet>? Data { get; set; }

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Filter data to show in the graph
    /// </summary>
    /// <param name="data">List of all data in the project</param>
    /// <returns>The list of filtered <see cref="DataChart"></returns>
    public List<ParameterValueSet> Filter(List<ParameterValueSet>? data)
    {
        var result = new List<ParameterValueSet>();
        if(data != null)
        {
            result.AddRange(data);
        }
        if (this.FilterOption != null)
        {
            var nestedParameters = this.IterationService.GetNestedParameters(this.ISessionAnchor.GetIteration(), this.FilterOption);
            if (nestedParameters.Count != 0)
            {
                nestedParameters.ForEach(nestedParameter =>
                {
                    result.RemoveAll(p => nestedParameter.AssociatedParameter.ValueSets.Contains(p));
                });
            } else
            {
                result.Clear();
            }
        }

        if (this.FilterState != null)
        {
            result.RemoveAll(d => d.ActualState == null || (d.ActualState != null && d.ActualState.Iid != this.FilterState));
        }


        if(this.FilterParameterType is not null && !this.FilterParameterType.Equals(""))
        {
            var parameterValueSets = this.IterationService.GetParameterValueSetsByParameterType(this.ISessionAnchor.GetIteration(), this.FilterParameterType);
            result.RemoveAll(d => !parameterValueSets.Contains(d));
        }

        return result;
    }

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.InitializeData();

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.InitializeData();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Initialize data for the graphs with all ParameterValueSet from the opened iteration 
    /// </summary>
    private void InitializeData()
    {
        this.Data = this.IterationService.GetParameterValueSets(this.ISessionAnchor.GetIteration()); 
    }
}
