<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject NavigationManager NavigationManager

<div class="row">
    <div class="col">
        <div class="row">
            <div class="col-9">
                <h3 class="text-align-end">Published Parameters</h3>
            </div>
            <div class="col text-align-start p-0">
                <Tooltip MarginBottom="bottom-60" Text="Publishable parameter : current value not equal to published value">
                    <button type="button" class="btn btn-secondary btn-tooltip"><span class="oi oi-info"></span></button>
                </Tooltip>
            </div>
        </div>
        @if(this.Data != null)
        {
            var publishedValues = Math.Round((double)this.Data.FindAll(d => d.Published.SequenceEqual(d.ActualValue)).Count * 100 / this.Data.Count);
            var publishableValues = 100 - publishedValues;
            <div class="row m-0">
                <BSProgress Class="height-30px">
                    <BSProgressBar IsStriped="true" Class="taskdone" Value="publishedValues">
                        @publishedValues %
                    </BSProgressBar>
                    <BSProgressBar IsStriped="true" Color="BSColor.Danger" Value="publishableValues">
                        @publishableValues %
                    </BSProgressBar>
                </BSProgress>
            </div>

            <ToDoTable ParameterValueSets="this.Data?.FindAll(d => !d.Published.SequenceEqual(d.ActualValue))"/>
        }

    </div>
    <div class="col">
        <div class="row">
            <div class="col-8">
                <h3 class="text-align-end">Missing Values</h3>
            </div>
            <div class="col text-align-start p-0">
                <Tooltip MarginBottom="bottom-60" Text="Missing Values = Published Values with Default Value '-'">
                    <button type="button" class="btn btn-secondary btn-tooltip"><span class="oi oi-info"></span></button>
                </Tooltip>
            </div>
        </div>
        @if(this.Data != null)
        {
            var defaultValues = Math.Round((double)this.Data.FindAll(d => d.ActualValue.Count(el => !el.Equals("-")) == 0).Count * 100 / this.Data.Count);
            var notDefaultValues = 100 - defaultValues;
            var parameterValueSets = this.Data.FindAll(d => d.ActualValue.Count(el => !el.Equals("-")) == 0);
            <div class="row m-0">
                <BSProgress Class="height-30px">
                    <BSProgressBar IsStriped="true" Class="taskdone" Value="notDefaultValues">
                        @notDefaultValues %
                    </BSProgressBar>
                    <BSProgressBar IsStriped="true" Color="BSColor.Danger" Value="defaultValues">
                        @defaultValues %
                    </BSProgressBar>
                </BSProgress>
            </div>
            
            <button class="todo-btn" @onclick="@(() => this.NavigationManager.NavigateTo($"/ParameterEditor?filteroption={this.FilterOption}"))">
                <ToDoTable ParameterValueSets="@parameterValueSets"/>
            </button>
        }
    </div>
</div>

@code {
    /// <summary>
    /// <see cref="ParameterValueSetBase">s owned by the active domain 
    /// </summary>
    [Parameter]
    public List<ParameterValueSetBase>? Data { get; set; }

    /// <summary>
    /// <see cref="Guid"> of the option to filter the data 
    /// </summary>
    [Parameter]
    public Guid? FilterOption { get; set; }

}
