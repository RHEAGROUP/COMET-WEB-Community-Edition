<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@using CDP4Common.EngineeringModelData
@inject NavigationManager NavigationManager

<div class="width-100">
    <div class="row">
        <div class="col-9">
            <h3 class="text-align-end">Published Parameters</h3>
        </div>
        <div class="col text-align-start p-0">
            <Tooltip MarginBottom="bottom-60" Text="Publishable parameter : actual value not equal to published value">
                <button type="button" class="btn btn-secondary btn-tooltip"><span class="oi oi-info"></span></button>
            </Tooltip>
        </div>
    </div>
    @if(this.Data != null)
    {
        <DxChart Data="@Data" CustomizeSeriesPoint="@PreparePointLabel">
            <DxChartFullStackedBarSeries Color="System.Drawing.Color.LightCoral" Name="Publishable Parameters" Filter="@((ParameterValueSetBase p) => !p.Published.SequenceEqual(p.ActualValue))"
                                        ArgumentField="@(p => p.Owner.ShortName)" ValueField="@(p => 1)"
                                        AggregationMethod="Enumerable.Sum">
                <DxChartSeriesLabel Position="RelativePosition.Inside"/>
            </DxChartFullStackedBarSeries>
            <DxChartFullStackedBarSeries Color="System.Drawing.Color.SteelBlue" Name="Published Parameters" Filter="@((ParameterValueSetBase p) => p.Published.SequenceEqual(p.ActualValue))"
                                        ArgumentField="@(p => p.Owner.ShortName)" ValueField="@(p => 1)"
                                        AggregationMethod="Enumerable.Sum">
                <DxChartSeriesLabel Position="RelativePosition.Inside" />
            </DxChartFullStackedBarSeries>
            <DxChartLegend Visible="false" />
            <DxChartTooltip Enabled="true" Position="RelativePosition.Inside">
                <div style="margin: 0.1rem">
                    <button class="card-btn" @onclick="@(() => AccessData(context.Point.SeriesName, context.Point.Argument))">
                        More
                    </button>
                </div>
            </DxChartTooltip>
        </DxChart>

        <DxChart Data="@Data" CssClass="justify-content-center width-100">
            <DxChartTooltip Enabled="true" Position="RelativePosition.Inside">
                @{
                    var total = this.Data.FindAll(d => d.Owner.ShortName.Equals(@context.Point.Argument)).Count;
                    var number = Math.Round((double)NumberData(@context.Point.SeriesName, @context.Point.Argument) / total * 100);
                }
                <div style="margin: 0.1rem">
                    @if (!double.IsNaN(number))
                    {
                        <button class="card-btn" @onclick="@(() => AccessData(context.Point.SeriesName, context.Point.Argument))">
                            <div>@number %</div>
                        </button>
                    }
                    else
                    {
                        <div>-</div>
                    }

                </div>
            </DxChartTooltip>
            <DxChartStackedBarSeries Color="System.Drawing.Color.LightCoral" Name="Publishable Parameters" Filter="@((ParameterValueSetBase p) => !p.Published.SequenceEqual(p.ActualValue))"
                                        ArgumentField="@(p => p.Owner.ShortName)" ValueField="@(p => 1)"
                                        AggregationMethod="Enumerable.Sum" />
            <DxChartStackedBarSeries Color="System.Drawing.Color.SteelBlue" Name="Published Parameters" Filter="@((ParameterValueSetBase p) => p.Published.SequenceEqual(p.ActualValue))"
                                        ArgumentField="@(p => p.Owner.ShortName)" ValueField="@(p => 1)"
                                        AggregationMethod="Enumerable.Sum" />
            <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Center" />
        </DxChart>   
    }
</div>

@code {
    /// <summary>
    /// <see cref="Guid"> of the option to filter the data 
    /// </summary>
    [Parameter]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// <see cref="Guid"> of the state to filter the data
    /// </summary>
    [Parameter]
    public Guid? FilterState { get; set; }

    /// <summary>
    /// Name of the parameterType to filter the data
    /// </summary>
    [Parameter]
    public string? FilterParameterType { get; set; }

    /// <summary>
    /// <see cref="ParameterValueSetBase"> for the graph
    /// </summary>
    [Parameter]
    public List<ParameterValueSetBase>? Data { get; set; }

    /// <summary>
    /// Set the point label on the graph
    /// </summary>
    /// <param name="pointSettings">The <see cref="ChartSeriesPointCustomizationSettings"> providing data of the selected point in the graph</param>
    protected void PreparePointLabel(ChartSeriesPointCustomizationSettings pointSettings) {
        var value = pointSettings.Point.Value;
        if (!value.Equals(0))
        {
            pointSettings.PointLabel.Visible = true;
        }        
    }

    /// <summary>
    /// Get the number of <see cref="ParameterValueSet"> represented in the selected area depending on criteria and domain
    /// </summary>
    /// <param name="criteria">The criteria represented in the selected area</param>
    /// <param name="domain">The associated domain of the selected area</param>
    /// <returns>The number of <see cref="ParameterValueSet"> represented in the selected area</returns>
    public int NumberData(string criteria, object domain)
    {
        if(this.Data != null && criteria.Equals("Published Parameters"))
        {
            return this.Data.FindAll(d => d.Owner.ShortName.Equals(domain) && d.Published.SequenceEqual(d.ActualValue)).Count;
        } else if(this.Data != null)
        {
            return this.Data.FindAll(d => d.Owner.ShortName.Equals(domain) && !d.Published.SequenceEqual(d.ActualValue)).Count;
        } else
        {
            return 0;
        }
    }

    /// <summary>
    /// Navigate to details page for the selected data
    /// </summary>
    /// <param name="criteria">The criteria represented in the selected area</param>
    /// <param name="domain">The associated domain of the selected area</param>
    public void AccessData(string criteria, object domain)
    {
        this.NavigationManager.NavigateTo($"ModelDashboard/ParametersDetails?filteroption={this.FilterOption}&filterstate={this.FilterState}&filterparametertype={this.FilterParameterType}&criteria={criteria}&domain={domain}");  
    }
}
