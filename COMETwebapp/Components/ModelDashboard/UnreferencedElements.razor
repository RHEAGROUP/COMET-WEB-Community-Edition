<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@using DevExpress.Blazor
@inject NavigationManager NavigationManager
@inject ISessionAnchor ISessionAnchor
@inject IIterationService iterationService

<div class="chart">
    <h3>Unreferenced Elements</h3>
    <DxChart Data="@Data"  CustomizeSeriesPoint="@PreparePointLabel">
        <DxChartFullStackedBarSeries Color="System.Drawing.Color.MediumPurple" Name="Referenced Elements" Filter="@((ElementDefinition e) => !this.UnReferencedElements.Contains(e))"
                                    ArgumentField="@(e => e.Owner.ShortName)" ValueField="@(e => 1)"
                                    AggregationMethod="Enumerable.Sum">
            <DxChartSeriesLabel Position="RelativePosition.Inside"/>
        </DxChartFullStackedBarSeries>
        <DxChartFullStackedBarSeries Color="System.Drawing.Color.Thistle" Name="Unreferenced Elements" Filter="@((ElementDefinition e) => this.UnReferencedElements.Contains(e))"
                                            ArgumentField="@(e => e.Owner.ShortName)" ValueField="@(e => 1)"
                                            AggregationMethod="Enumerable.Sum">
            <DxChartSeriesLabel Position="RelativePosition.Inside" />
        </DxChartFullStackedBarSeries>
        <DxChartTooltip Enabled="true" Position="RelativePosition.Inside">
                    <div style="margin: 0.1rem">
                        <button class="card-btn" @onclick="@(() => AccessData(context.Point.SeriesName, context.Point.Argument))">
                            More
                        </button>
                    </div>
        </DxChartTooltip>
        <DxChartLegend Visible="true" Position="RelativePosition.Outside" VerticalAlignment="VerticalEdge.Bottom" />
    </DxChart>
</div>

@code {
    /// <summary>
    /// Data in the graph
    /// </summary>
    [Parameter]
    public List<ElementDefinition> Data { get; set; }

    /// <summary>
    /// List of unreferenced element defintion from the opened iteration
    /// </summary>
    private List<ElementDefinition> UnReferencedElements { get; set; }

    /// <summary>
    /// Initialize the UnReferencedElements list
    /// </summary>
    protected override void OnInitialized()
    {
        this.UnReferencedElements = iterationService.GetUnreferencedElements(ISessionAnchor.OpenIteration);
    }

    /// <summary>
    /// Set the point label on the graph
    /// </summary>
    /// <param name="pointSettings">The <see cref="ChartSeriesPointCustomizationSettings"> providing data of the selected point in the graph</param>
    protected void PreparePointLabel(ChartSeriesPointCustomizationSettings pointSettings) {
        var value = pointSettings.Point.Value;
        if (!value.Equals(0))
        {
            pointSettings.PointLabel.Visible = true;
        }        
    }

    /// Navigate to details page for the selected data
    /// </summary>
    /// <param name="criteria">The criteria represented in the selected area</param>
    /// <param name="domain">The associated domain of the selected area</param>
    public void AccessData(string criteria, object domain)
    {
        NavigationManager.NavigateTo($"ModelDashboard/ElementsDetails?criteria={criteria}&domain={domain}");      
    }
}
