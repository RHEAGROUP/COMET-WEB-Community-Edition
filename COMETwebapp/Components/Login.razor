<!------------------------------------------------------------------------------
    Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

<EditForm Model="AuthenticationDto" OnValidSubmit="ExecuteLogin">
    <div class="form-group row">
        <label for="ur">Source Address:</label>
        <div class="col-md-15 m-top-3px">
            <InputText id="sourceaddress" class="form-control" @bind-Value="AuthenticationDto.SourceAddress" />
        </div>
    </div>
    <div class="form-group row m-top-5px">
        <label for="username">UserName:</label>
        <div class="col-md-15 m-top-3px">
            <InputText id="username" class="form-control" @bind-Value="AuthenticationDto.UserName" />
        </div>
    </div>
    <div class="form-group row m-top-5px">
        <label for="password" >Password:</label>
        <div class="col-md-15 m-top-3px">
            <InputText type="password" id="password" class="form-control" @bind-Value="AuthenticationDto.Password" />
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-12 text-center">

            @switch(this.AuthenticationState)
                {
                    case AuthenticationStateKind.None:
                        <button id="connectbtn" type="submit" class="btn btn-connect m-top-5px">Connect</button>            
                        break;
                    case AuthenticationStateKind.Authenticating:
                        <button id="connectbtn" type="submit" class="btn btn-connect m-top-5px" disabled=true>Connecting</button>            
                        break;
                    case AuthenticationStateKind.Fail:
                        <button id="connectbtn" type="submit" class="btn btn-connect m-top-5px" >Retry</button>            
                        break;
                }
        </div>
    </div>

    @if (this.AuthenticationState == AuthenticationStateKind.Fail)
    {
        <div class="form-group row m-top-5px">
            <label>Login Failed</label>
        </div>
    }

</EditForm>

@code{
    /// <summary>
    /// Gets or sets the (injected) IAuthenticationService used to authenticate against the selected datasource
    /// </summary>
    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }

    /// <summary>
    /// Gets or sets the (injected) NavigationManager used to navigate between pages
    /// </summary>
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="AuthenticationStateKind"/>
    /// </summary>
    public AuthenticationStateKind AuthenticationState { get; set; }

    /// <summary>
    /// Initializes the AuthenticatioDto object completed with the EditForm
    /// </summary>
    private AuthenticationDto AuthenticationDto = new AuthenticationDto();

    /// <summary>
    /// Open the <see cref="ISession" /> and update the <see cref="ISessionAnchor" />
    /// </summary>
    /// <returns>
    /// an awaitable task
    /// </returns>
    public async Task ExecuteLogin()
    {
        this.AuthenticationState = AuthenticationStateKind.Authenticating;
        StateHasChanged();

        this.AuthenticationState = await AuthenticationService.Login(AuthenticationDto);

        if (this.AuthenticationState == AuthenticationStateKind.Success)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}