<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor
@inject IAutoRefreshService AutoRefreshService
@inject IIterationService IterationService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager


<BSButton IsOutlined="true" Color="BSColor.Primary" DataId="popoverTop"><span class="oi oi-person"></span></BSButton>
<BSPopover Placement="Placement.Bottom" Target="popoverTop">
    <Header>
        <div class="container-fluid">
            <div class="row justify-content-center">
                @Username
            </div>
            @if(@ISessionAnchor.CurrentEngineeringModelName != null)
            {
                <div class="row justify-content-center model-name-popover">
                    @ISessionAnchor.CurrentEngineeringModelName
                </div>
            }
            <div class="row justify-content-center font-size-smaller">
                @ISessionAnchor.Session.DataSourceUri
            </div>
        </div>
    </Header>
    <Content>
        <div class="container-fluid p-0">
            <div class="row justify-content-center p-2">
                @if(this.ISessionAnchor.GetIteration() is not null)
			    {
				    <select class="width-fit-content" id="domnain" @onchange="OnSwitchDomain">
					    @foreach (var domain in this.ISessionAnchor.Session.QueryDomainOfExpertise(this.ISessionAnchor.GetIteration()).OrderBy(i => i.Name))
					    {
						    @if(domain == this.ISessionAnchor.CurrentDomainOfExpertise)
						    {
							    <option value="@domain.Name" selected>@domain.Name</option>
						    } else
						    {
							    <option value="@domain.Name">@domain.Name</option>
						    }
					    }
				    </select>
			    }
            </div>
            <div class="row text-align-center m-top-10px refresh-button-popover">
                <div class="col">
                    <RefreshButton />
                </div>
            </div>
            <div class="row m-top-10px p-2">
                <div class="col text-align-center">
                    @if(this.AutoRefreshService.IsAutoRefreshEnabled){
                            <input type="checkbox" class="m-right-3px" id="refreshSession" checked @onchange="@OnChoiceChange">
                    } else {
                            <input type="checkbox" class="m-right-3px" id="refreshSession" @onchange="@OnChoiceChange">
                    }
                    Refresh every
                    <input class="m-left-3px m-right-3px width-50px" type="number" id="value" value="@AutoRefreshService.AutoRefreshInterval" @onchange="@OnIntervalChange">
                    sec
                </div>
            </div>
            <div class="row text-align-center m-top-35px">
                @if (this.ISessionAnchor.GetIteration() is not null)
                {
                    <div class="col-7">
                        <CloseModelButton/>
                    </div>
                }
                <div class="col">
                    <button class="btn btn-connect" @onclick="() => Logout()">Log out</button>
                </div>
            </div>
            <div class="row text-align-center m-top-10px about-button-popover">
                <AboutButton />
            </div>
        </div>
    </Content>
</BSPopover>

@code {
    /// <summary>
    /// Name of the Active Person
    /// </summary>
    [Parameter]
    public string? Username { get; set; }

    /// <summary>
    /// Enable/disable auto-refresh for the ISession
    /// </summary>
    /// <param name="e">The <see cref="ChangeEventArgs"> from the checkbox input</param>
    public void OnChoiceChange(ChangeEventArgs e)
    {
        var value = e.Value;
        if(value != null)
        {
            this.AutoRefreshService.IsAutoRefreshEnabled = (bool) value;
            this.AutoRefreshService.SetTimer();
        }
    }

    /// <summary>
    /// Set interval to automatically refresh the ISession
    /// </summary>
    /// <param name="e">The <see cref="ChangeEventArgs"> from the number input </param>
    public void OnIntervalChange(ChangeEventArgs e)
    {
        var value = e.Value;
        if (value != null)
        {
            this.AutoRefreshService.AutoRefreshInterval = int.Parse((string) value);
            this.AutoRefreshService.SetTimer();
        }
    }

    /// <summary>
    /// Gets the selected <see cref="DomainOfExpertise"/> and switchs ISession active domain 
    /// </summary>
    /// <param name="e"><see cref="ChangeEventArgs"/> from selector</param>
    public void OnSwitchDomain(ChangeEventArgs e)
    {
        var selectedDomainOfExpertise = this.ISessionAnchor.Session.QueryDomainOfExpertise(this.ISessionAnchor.GetIteration()).ToList().Find(domain => domain.Name.Equals(e.Value));
        this.ISessionAnchor.SwitchDomain(selectedDomainOfExpertise);
    }

    /// <summary>
    /// Close the <see cref="ISession" /> and update the <see cref="ISessionAnchor" />
    /// </summary>
    public async void Logout()
    {
        await AuthenticationService.Logout();
        this.IterationService.ValidatedUpdates.Clear();
        this.NavigationManager.NavigateTo("/");
    }
}
