<!------------------------------------------------------------------------------
// Copyright (c) 2023-2024 RHEA System S.A.
//
//     Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine Nabil Abbar
//
//     This file is part of CDP4-COMET WEB Community Edition
//      The CDP4-COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//     The CDP4-COMET WEB Community Edition is free software; you can redistribute it and/or
//     modify it under the terms of the GNU Affero General Public
//     License as published by the Free Software Foundation; either
//     version 3 of the License, or (at your option) any later version.
//
//     The CDP4-COMET WEB Community Edition is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//     Affero General Public License for more details.
//
//     You should have received a copy of the GNU Affero General Public License
//     along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.ViewModels.Components.UserManagement.Rows
@using CDP4Common.SiteDirectoryData
@inherits COMET.Web.Common.Components.Applications.ApplicationBase<COMETwebapp.ViewModels.Components.UserManagement.IUserManagementTableViewModel>

<LoadingComponent IsVisible="@this.ViewModel.IsLoading">
    <DxGrid @ref="this.Grid"
            Data="this.ViewModel.Rows.Items"
            ShowSearchBox="true"
            SearchBoxNullText="Search for a person..."
            PageSize="12"
            ValidationEnabled="false"
            CustomSummary="CustomSummary"
            CustomizeSummaryDisplayText="CustomizeSummaryDisplayText"
            CustomizeEditModel="this.CustomizeEditPerson"
            PopupEditFormCssClass="pw-800"
            PopupEditFormHeaderText="Create Person"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="@(this.OnEditModelSaving)"
            CustomizeElement="DisableDeprecatedPerson">
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="IsActive" ValueDisplayFormat="{0} Total" />
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" Name="Inactive" FieldName="IsActive" />
        </TotalSummary>
        <Columns>
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.PersonName)" MinWidth="80" />
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.PersonShortName)" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.PersonEmailAddress)" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.PersonTelephoneNumber)" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.Role)" Caption="Role" MinWidth="80" SearchEnabled="false" />
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.IsActive)" UnboundType="GridUnboundColumnType.Boolean" MinWidth="80" SearchEnabled="false">
                <CellDisplayTemplate>
                    @{
                        var row = (PersonRowViewModel)context.DataItem;
                        <DxCheckBox Id="activatePerson" CssClass="d-inline-block" CheckedChanged="@((bool value) => this.ViewModel.ActivatingOrDisactivatingPerson(context, value))" Checked="(bool)context.Value" Enabled="row.IsAllowedToWrite" />
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(PersonRowViewModel.IsDeprecated)" UnboundType="GridUnboundColumnType.Boolean" Visible="false" Caption="Role" MinWidth="80" SearchEnabled="false" />
            <DxGridCommandColumn Width="200px" EditButtonVisible="false">
                <HeaderTemplate>
                    <DxButton Id="addPersonButton" Text="Add User" IconCssClass="oi oi-plus" CssClass="my-custom-style" Click="() => this.Grid.StartEditNewRowAsync()" />
                </HeaderTemplate>
                <CellDisplayTemplate>
                    @{
                        var row = (PersonRowViewModel)context.DataItem;

                        <DxButton Id="editPersonButton" Text="Edit" Click="@(() => this.Grid.StartEditRowAsync(context.VisibleIndex))" Enabled="row.IsAllowedToWrite" />

                        if (row.IsDeprecated)
                        {
                            <DxButton Id="undeprecateButton" Text="Un-deprecate" Click="() => this.ViewModel.OnDeprecateUnDeprecateButtonClick(row)" Enabled="row.IsAllowedToWrite" />
                        }
                        else
                        {
                            <DxButton Id="deprecateButton" Text="Deprecate" Click="() => this.ViewModel.OnDeprecateUnDeprecateButtonClick(row)" Enabled="row.IsAllowedToWrite" />
                        }
                    }  
                </CellDisplayTemplate>
            </DxGridCommandColumn>
        </Columns>
        <EditFormTemplate Context="EditFormContext">
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutTabPages>
                    <DxFormLayoutTabPage Caption="Basic">
                        <DxFormLayoutItem Caption="Shortname:" ColSpanMd="10">
                            <DxTextBox @bind-Text="@this.ViewModel.Person.ShortName" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Given Name:" ColSpanMd="10">
                            <DxTextBox @bind-Text="@this.ViewModel.Person.GivenName" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Surname:" ColSpanMd="10">
                            <DxTextBox @bind-Text="@this.ViewModel.Person.Surname" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Organizational Unit:" ColSpanMd="10">
                            <DxTextBox @bind-Text="@this.ViewModel.Person.OrganizationalUnit" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Organization:" ColSpanMd="10">
                            <DxComboBox Data="@this.ViewModel.AvailableOrganizations"
                                        TextFieldName="@nameof(Organization.Name)"
                                        @bind-Value="@this.ViewModel.Person.Organization"
                                        CssClass="cw-480" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Person Role:" ColSpanMd="10">
                            <DxComboBox Data="@this.ViewModel.AvailablePersonRoles"
                                        TextFieldName="@nameof(PersonRole.Name)"
                                        @bind-Value="@this.ViewModel.Person.Role"
                                        CssClass="cw-480" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Default Domain:" ColSpanMd="10">
                            <DxComboBox Data="@this.ViewModel.AvailableDomains"
                                        TextFieldName="@nameof(DomainOfExpertise.Name)"
                                        @bind-Value="@this.ViewModel.Person.DefaultDomain"
                                        CssClass="cw-480" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Active:" ColSpanMd="6">
                            <DxCheckBox @bind-Checked="@this.ViewModel.Person.IsActive" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Deprecated:" ColSpanMd="6">
                            <DxCheckBox @bind-Checked="@this.ViewModel.Person.IsDeprecated" />
                        </DxFormLayoutItem>
                    </DxFormLayoutTabPage>
                    <DxFormLayoutTabPage Caption="E-Mail">
                        <DxComboBox Data="@this.ViewModel.EmailAddressKinds"
                                    @bind-Value="@this.ViewModel.EmailAddress.VcardType"
                                    CssClass="cw-480" />
                        <DxFormLayoutItem Caption="Email:" ColSpanMd="6">
                            <DxTextBox @bind-Text="@this.ViewModel.EmailAddress.Value" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Is default:" ColSpanMd="6">
                            <DxCheckBox @bind-Checked="@this.ViewModel.IsDefaultEmail" />
                        </DxFormLayoutItem>
                    </DxFormLayoutTabPage>
                    <DxFormLayoutTabPage Caption="Telephone Number">
                        <DxComboBox Data="@this.ViewModel.TelephoneNumberKinds"
                                    @bind-Value="@this.ViewModel.TelephoneNumber.VcardType"
                                    CssClass="cw-480" />
                        <DxFormLayoutItem Caption="Number:" ColSpanMd="6">
                            <DxTextBox @bind-Text="@this.ViewModel.TelephoneNumber.Value" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Is default:" ColSpanMd="6">
                            <DxCheckBox @bind-Checked="@this.ViewModel.IsDefaultTelephoneNumber" />
                        </DxFormLayoutItem>
                    </DxFormLayoutTabPage>
                </DxFormLayoutTabPages>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
    <DxPopup @bind-Visible="@this.ViewModel.IsOnDeprecationMode" HeaderText="Please confirm" Width="auto" CloseOnOutsideClick="false">
        @this.ViewModel.PopupDialog
        <div class="dxbl-grid-confirm-dialog-buttons">
            <DxButton Text="Cancel " RenderStyle="ButtonRenderStyle.Success" Click="@this.ViewModel.OnCancelButtonClick" />
            <DxButton Text="Confirm" RenderStyle="ButtonRenderStyle.Danger" Click="@this.ViewModel.OnConfirmButtonClick" />
        </div>
    </DxPopup>
</LoadingComponent>
