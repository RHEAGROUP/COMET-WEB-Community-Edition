<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.Primitives

@if (this.ParameterSelected.ParameterType is ScalarParameterType scalarType)
{
    if (scalarType is EnumerationParameterType enumerationType)
    {
        <DxComboBox Data="enumerationType.ValueDefinition.OrderBy(x=>x.Name).Select(x=>x.Name).ToList()"
            NullText="-"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
            Value="this.GetValueSet().ActualValue.First()"
            ValueChanged="@((string value)=>this.OnParameterValueChange(0,new ChangeEventArgs(){Value = value}))" />
    }
    else if (scalarType is BooleanParameterType booleanType)
    {
        <DxComboBox Data="@(new string[] {"-", "true", "false" })"
            AllowUserInput="true"
            Value="this.GetValueSet().ActualValue.First()"
            ValueChanged="@((string value)=>this.OnParameterValueChange(0,new ChangeEventArgs(){Value = value}))"
            FilteringMode="DataGridFilteringMode.Contains" />
    }
    else if (scalarType is DateParameterType dateType)
    {
        DateTime.TryParse(this.GetValueSet().ActualValue.First(), out DateTime date);

        <DxDateEdit Date="date"
            DateChanged="@((DateTime? date) => this.OnParameterValueChange(0, new ChangeEventArgs(){Value = date.ToString()}))"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            NullText="Select a date..." />
    }
    else if (scalarType is TextParameterType textType)
    {
        var colorText = this.GetValueSet().ActualValue.First();
        var colorValue = colorText.ParseToHexColor();

        if (textType.ShortName == SceneSettings.ColorShortName)
        {
            <div id="color-section">
                <input type="color" id="color" name="color" value="@colorValue" @onchange="(e)=>this.OnParameterValueChange(0,e)">
                <label for="color" id="color-text">Color</label>
            </div>
        }
        else
        {
            <div class="parameter-row">
                <p>@textType.Name</p>
                <BSInput InputType="InputType.Text" Value="this.GetValueSet().ActualValue.First()" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" />
            </div>
        }
    }
    else if (scalarType is DateTimeParameterType dateTimeType)
    {
        var dateTimeString = this.GetValueSet().ActualValue.First();
        var dateTimeStringSplitted = dateTimeString.Split('T');

        DateTime.TryParse(dateTimeStringSplitted[0], out DateTime date);

        <DxDateEdit Date="date"
            DateChanged="@((DateTime? date) => this.OnParameterValueChange(0, new ChangeEventArgs(){Value = date.ToString()}))"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            NullText="Select a date..." />

        var timeString = dateTimeStringSplitted[1];
        var values = timeString.Split(':');

        <div class="parameter-row">
            <BSInput InputType="InputType.Text" Value="values[0]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[1]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(1,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[2]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(2,e)" />
        </div>
    }
    else if (scalarType is TimeOfDayParameterType timeOfDayType)
    {
        var timeString = this.GetValueSet().ActualValue.First();
        var values = timeString.Split(':');

        <div class="parameter-row">
            <BSInput InputType="InputType.Text" Value="values[0]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[1]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(1,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[2]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(2,e)" />
        </div>
    }
    else if (scalarType is QuantityKind quantityKind)
    {
        <div class="parameter-row">
            <p>@quantityKind.Name</p>
            <BSInput InputType="InputType.Text" Value="this.GetValueSet().ActualValue.First()" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" />
            <p>@quantityKind.DefaultScale.ShortName</p>
        </div>
    }
}
else if (this.ParameterSelected.ParameterType is CompoundParameterType compoundType)
{
    var valueSet = this.GetValueSet();

    if (compoundType.ShortName == SceneSettings.OrientationShortName)
    {
        <OrientationComponent OrientationParameterType="compoundType" DetailsComponent="this"/>
    }
    else
    {
        for (int i = 0; i < compoundType.Component.Count; i++)
        {
            var index = i;
            var comp = compoundType.Component[i];

            <div class="parameter-row">
                <p>@comp.ShortName</p>
                <BSInput InputType="InputType.Text" Value="valueSet.ActualValue[i]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(index,e)" />
                <p>@comp.Scale.ShortName</p>
            </div>
        }
    }
}


<style>

    .parameter-input {
        margin: 2%;
    }

    .parameter-row {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: flex-start;
    }

    #color-text {
        margin-left: 2%;
    }
</style>