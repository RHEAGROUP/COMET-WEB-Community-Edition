<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.Extensions
@using CDP4Common.SiteDirectoryData

@if (!this.IsVisible)
{
    return;
}

@if (this.ParameterSelected.ParameterType is ScalarParameterType scalarType)
{
    var value = this.GetSelectedParameterValueSet() is not null ? this.GetSelectedParameterValueSet().ActualValue.First() : "";

    if (scalarType is EnumerationParameterType enumerationType)
    {
        <div class="parameter-row-centered">
            <DxComboBox Data="enumerationType.ValueDefinition.OrderBy(x=>x.Name).Select(x=>x.Name).ToList()"
                NullText="-"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                Value="@value"
                ValueChanged="@((string value)=>this.OnParameterValueChange(0,new ChangeEventArgs(){Value = value}))" />
        </div>
    }
    else if (scalarType is BooleanParameterType booleanType)
    {
        <div class="parameter-row-centered">
            @{
                var data = new List<string>() { "-", "true", "false" };
                <DxComboBox Data="data"
                NullText="-"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                Value="@value"
                ValueChanged="@((string value)=>this.OnParameterValueChange(0,new ChangeEventArgs(){Value = value}))" />
            }
        </div>
    }
    else if (scalarType is DateParameterType dateType)
    {
        DateTime.TryParse(@value, out DateTime date);
        <div class="parameter-row">
            <DxDateEdit Date="date"
                DateChanged="@((DateTime? date) => this.OnParameterValueChange(0, new ChangeEventArgs(){Value = date.ToString()}))"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                NullText="Select a date..." />
        </div>
    }
    else if (scalarType is TextParameterType textType)
    {
        var colorValue = value.ParseToHexColor();

        if (textType.ShortName == SceneSettings.ColorShortName)
        {
            <div class="parameter-row" id="color-section">
                <input type="color" id="color" name="color" value="@colorValue" @onchange="(e)=>this.OnParameterValueChange(0,e)">
                <label for="color" id="color-text">Color</label>
            </div>
        }
        else
        {
            <div class="parameter-row">
                <p>@textType.Name</p>
                <BSInput InputType="InputType.Text" Value="@value" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" />
            </div>
        }
    }
    else if (scalarType is DateTimeParameterType dateTimeType)
    {
        var dateTimeStringSplitted = value.Split('T');
        DateTime.TryParse(dateTimeStringSplitted[0], out DateTime date);

        <div class="parameter-row">
            <DxDateEdit Date="date"
                DateChanged="@((DateTime? date) => this.OnParameterValueChange(0, new ChangeEventArgs(){Value = date.ToString()}))"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                NullText="Select a date..." />
        </div>

        var timeString = dateTimeStringSplitted[1];
        var values = timeString.Split(':');

        <div class="parameter-row">
            <BSInput InputType="InputType.Text" Value="values[0]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[1]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(1,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[2]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(2,e)" />
        </div>
    }
    else if (scalarType is TimeOfDayParameterType timeOfDayType)
    {
        var values = value.Split(':');

        <div class="parameter-row">
            <BSInput InputType="InputType.Text" Value="values[0]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[1]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(1,e)" /> <p>:</p>
            <BSInput InputType="InputType.Text" Value="values[2]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(2,e)" />
        </div>
    }
    else if (scalarType is QuantityKind quantityKind)
    {
        <div class="parameter-row">
            <p>@quantityKind.Name</p>

            <BSInput InputType="InputType.Text" Value="@value" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(0,e)" />
            <p>@quantityKind.DefaultScale.ShortName</p>
        </div>
    }
}
else if (this.ParameterSelected.ParameterType is CompoundParameterType compoundType)
{
    var valueSet = this.GetSelectedParameterValueSet();

    if (compoundType.ShortName == SceneSettings.OrientationShortName && valueSet is not null)
    {
        <OrientationComponent OrientationParameterType="compoundType" DetailsComponent="this"/>
    }
    else if (valueSet is not null)
    {
        for (int i = 0; i < compoundType.Component.Count; i++)
        {
            var index = i;
            var comp = compoundType.Component[i];

            <div class="parameter-row">
                <p>@comp.ShortName</p>
                <BSInput InputType="InputType.Text" Value="valueSet?.ActualValue[i]" Class="parameter-input" @oninput="(e)=>this.OnParameterValueChange(index,e)" />
                <p>@comp.Scale.ShortName</p>
            </div>
        }
    }
}
