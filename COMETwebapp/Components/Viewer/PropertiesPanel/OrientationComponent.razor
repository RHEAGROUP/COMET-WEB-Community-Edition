<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar

This file is part of COMET WEB Community Edition
The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

The COMET WEB Community Edition is free software; you can redistribute it and/or
modify it under the terms of the GNU Affero General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.

The COMET WEB Community Edition is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using Enumerations;
@using System.Globalization

<DxTabs>
    <DxTabPage Text="Euler" CssClass="euler-tab">
        <div id="euler-orientation-tab">
            @{
                <div class="angle-selector">
                    <DxComboBox Data="this.ViewModel.AngleFormats"
                                NullText="-"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                Value="@this.ViewModel.AngleFormat"
                                ValueChanged="@((AngleFormat value)=>this.ViewModel.OnAngleFormatChanged(value))" />
                </div>
                <div class="parameter-row">
                    <p>Rx:</p>
                    <DxTextBox Text="@this.ViewModel.Orientation.X.ToString(CultureInfo.InvariantCulture)" BindValueMode="BindValueMode.OnInput" CssClass="parameter-input" @oninput="@((e) => this.ViewModel.OnEulerAnglesChanged("Rx",e))"></DxTextBox>
                </div>
                <div class="parameter-row">
                    <p>Ry:</p>
                    <DxTextBox Text="@this.ViewModel.Orientation.Y.ToString(CultureInfo.InvariantCulture)" BindValueMode="BindValueMode.OnInput" CssClass="parameter-input" @oninput="@((e) => this.ViewModel.OnEulerAnglesChanged("Ry",e))"></DxTextBox>
                </div>
                <div class="parameter-row">
                    <p>Rz:</p>
                    <DxTextBox Text="@this.ViewModel.Orientation.Z.ToString(CultureInfo.InvariantCulture)" BindValueMode="BindValueMode.OnInput" CssClass="parameter-input" @oninput="@((e) => this.ViewModel.OnEulerAnglesChanged("Rz",e))"></DxTextBox>
                </div>
            }
        </div>
    </DxTabPage>
    <DxTabPage Text="Matrix" CssClass="matrix-tab">
        <div id="matrix-orientation-tab">
            @{
                var names = new string[] { "R0C0", "R0C1", "R0C2", "R1C0", "R1C1", "R1C2", "R2C0", "R2C1", "R2C2" };
                @for (var i = 0; i < this.ViewModel.Orientation.Matrix.Length; i++)
                {
                    var index = i;
                    <div class="parameter-row">
                        <p>@names[index]</p>
                        <DxTextBox Text="@this.ViewModel.Orientation.Matrix[index].ToString(CultureInfo.InvariantCulture)" BindValueMode="BindValueMode.OnInput" CssClass="parameter-input" @oninput="(e) => this.ViewModel.OnMatrixValuesChanged(index, e)"></DxTextBox>
                    </div>
                }
            }
        </div>
    </DxTabPage>
</DxTabs>
