<!------------------------------------------------------------------------------
// Copyright (c) 2023 RHEA System S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, Nabil Abbar
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@using CDP4Common.SiteDirectoryData
@using COMETwebapp.ViewModels.Components.Shared.ParameterEditors
@{
    switch (this.ViewModel.ParameterType)
    {
        case BooleanParameterType:
            <BooleanParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<BooleanParameterType>()" 
                                        ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)"/>
            break;

        case CompoundParameterType:
            <CompoundParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<CompoundParameterType>()"
                                         ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)"/>
            break;

        case DateParameterType:
            <DateParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<DateParameterType>()"
                                     ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)" />
            break;

        case DateTimeParameterType:
            <DateTimeParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<DateTimeParameterType>()"
                                         ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)" />
            break;

        case EnumerationParameterType:
            <EnumerationParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<EnumerationParameterType>()"
                                            ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)" />
            break;

        case QuantityKind:
            <QuantityKindParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<QuantityKind>()"
                                             ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)" />
            break;

        case TextParameterType:
            <TextParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<TextParameterType>()"
                                     ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)" />
            break;

        case TimeOfDayParameterType:
            <TimeOfDayParameterTypeEditor ViewModel="this.ViewModel.CreateParameterEditorViewModel<TimeOfDayParameterType>()"
                                          ParameterValueChanged="(e) => this.ViewModel.OnParameterValueChanged(e)" />
            break;

        default:
            <p>This component is under development</p>
            break;
    }
}
