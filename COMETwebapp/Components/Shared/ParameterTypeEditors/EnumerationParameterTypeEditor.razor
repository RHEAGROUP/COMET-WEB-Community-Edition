<!------------------------------------------------------------------------------
// Copyright (c) 2023 RHEA System S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, Nabil Abbar
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@inherits DisposableComponent
@using CDP4Common.SiteDirectoryData;

@using COMETwebapp.Extensions;
@using COMETwebapp.ViewModels.Components.Shared.ParameterEditors;


    @if (this.ViewModel is IEnumerationParameterTypeEditorViewModel enumerationParameterTypeEditorViewModel)
    {
        @if (this.ViewModel.ParameterType.AllowMultiSelect)
        {
            <div  id="dropdown-customization-target-container">
                <DxTextBox NullText="-" Text="@enumerationParameterTypeEditorViewModel.SelectedEnumerationValueDefinitions.AsCommaSeparated()" CssClass="textBoxEllipsis" ReadOnly=true/>
                <div class="dropdownIcon">
                    <span @onclick="@(() => enumerationParameterTypeEditorViewModel.IsOnEditMode = !enumerationParameterTypeEditorViewModel.IsOnEditMode)"><i class="oi oi-caret-bottom"></i></span>
                </div>
            </div>
            <DxDropDown @bind-IsOpen="@enumerationParameterTypeEditorViewModel.IsOnEditMode"
            Width="300" AllowResize="true"
            PositionMode="DropDownPositionMode.Bottom"
            PositionTarget="#dropdown-customization-target-container"
            RestrictionTarget="#Navigation-DropDown-Customization"
            CloseMode="DropDownCloseMode.Close"
            PreventCloseOnPositionTargetClick="true"
            HeaderVisible="false"
            FooterVisible="true">
                <BodyTemplate>

                    <DxCheckBox CheckedChanged="@((bool value) => enumerationParameterTypeEditorViewModel.OnSelectAllChanged(value))">Select All</DxCheckBox>

                    <DxListBox CssClass="enumeration-parameter-type"
                   Data="enumerationParameterTypeEditorViewModel.EnumerationValueDefinitions.OrderBy(x=>x.Name).Select(x=>x.Name)"
                       @bind-Values="enumerationParameterTypeEditorViewModel.SelectedEnumerationValueDefinitions"
                   ReadOnly="this.ViewModel.IsReadOnly"
                   SelectionMode="ListBoxSelectionMode.Multiple"
                   ShowCheckboxes="true" />
                </BodyTemplate>
                <FooterTextTemplate>
                    <DxButton Id="confirmButton" RenderStyle="ButtonRenderStyle.Primary" Text="Ok" Click="enumerationParameterTypeEditorViewModel.OnConfirmButtonClick" />
                    <DxButton Id="cancelButton" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="enumerationParameterTypeEditorViewModel.OnCancelButtonClick" />
                </FooterTextTemplate>
            </DxDropDown>
        }
        else
        {
            <DxComboBox CssClass="enumeration-parameter-type"
            Data="this.ViewModel.ParameterType.ValueDefinition.OrderBy(x=>x.Name).Select(x=>x.Name)"
            NullText="-"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
            Value="@this.ViewModel.ValueArray[this.ViewModel.ValueArrayIndex]"
            ReadOnly="this.ViewModel.IsReadOnly"
            ValueChanged="(string value) => this.ViewModel.OnParameterValueChanged(value)" />
        }

    <ValidationMessageComponent ValidationMessage="@this.ViewModel.ValidationMessage" />
    }
