<!------------------------------------------------------------------------------
// Copyright (c) 2023 RHEA System S.A.
//
//    Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine, Nabil Abbar
//
//    This file is part of COMET WEB Community Edition
//    The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET WEB Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
//
//    The COMET WEB Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//    Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.SiteDirectoryData

<div class="container-fluid p-0">
    <div class="row m-0 font-size-small">
        <div class="col-2 p-0 align-self-center">
            @this.Component.ShortName
        </div>
        <div class="col-10 p-0">
            
                @if (this.Component.ParameterType.NumberOfValues == 1)
                {
                    <ScalarParameter Value="@this.GetScalarValue()"
                             Scale="@this.Component.Scale"/>
                }
                else if (this.Component.ParameterType is ArrayParameterType arrayParameterType)
                {
                    <ArrayParameter ArrayParameterType="@arrayParameterType"
                            Values="@this.GetCompoundOrArrayValues()"/>
                }
                else
                {
                    var compoundParameterType = (CompoundParameterType)this.Component.ParameterType;

                    if (compoundParameterType != null)
                    {
                        foreach (var component in compoundParameterType.Component.ToList())
                        {
                            var index = 0;
                            for (var componentIndex = 0; componentIndex < compoundParameterType.Component.IndexOf(component); componentIndex++)
                            {
                                index += compoundParameterType.Component.ElementAt(componentIndex).ParameterType.NumberOfValues;

                            }
                            var indexStart = this.IndexStartInParameterTypeComponent + index;

                            <CompoundParameter IndexStartInParameterTypeComponent="@indexStart"
                               Values="@this.GetCompoundOrArrayValues()"
                               Component="@component"
                               ParameterValueSet="@this.ParameterValueSet" />
                        }
                    }
                }
        </div>
    </div>
</div>