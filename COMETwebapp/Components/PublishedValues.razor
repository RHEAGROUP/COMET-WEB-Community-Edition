<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@inject ISessionAnchor ISessionAnchor
@using DevExpress.Blazor

<div class="display-flex flex-column">
    <div class="display-flex flex-row">

        <ChartDonutSeries Title="Test1" Data=Filter(Data)/>

        <FullStackedBarSeries Title="Test2" Data=Filter(Data) NameSerie1="Published values" NameSerie2="Publishable values"/>
    </div>
    <div class="display-flex flex-row">
        <ChartBarSeries Title="Test3" Data=Filter(Data) NameSerie1="Published values" NameSerie2="Publishable values"/>

        <ChartStackedBarSeries Title="Test4" Data=Filter(Data)  NameSerie1="Published values" NameSerie2="Publishable values"/>
    </div>
</div>

@code {
    /// <summary>
    /// list of data in the graphs
    /// </summary>
    List<DataChart> Data = new List<DataChart>();

    /// <summary>
    /// <see cref="Guid"> of the option to filter the data 
    /// </summary>
    [Parameter]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// <see cref="Guid"> of the state to filter the data 
    /// </summary>
    [Parameter]
    public Guid? FilterState { get; set; }

    /// <summary>
    /// Get all parameter values and build the list of data 
    /// </summary>
    protected override void OnInitialized()
    {
        if(ISessionAnchor.OpenIteration != null){
            var domains = ISessionAnchor.Session.QueryDomainOfExpertise(ISessionAnchor.OpenIteration).ToList();
            var options = ISessionAnchor.OpenIteration.Option.ToList();
            var actualFiniteStateLists = ISessionAnchor.OpenIteration.ActualFiniteStateList;
            List<ParameterValueSet> sessionParameterValueSets = ISessionAnchor.GetParameterValueSets();

            if (actualFiniteStateLists.Any())
            {
                domains.ForEach(d =>
                {
                    var parameterDomains = sessionParameterValueSets.FindAll(i => i.Owner == d);
                    options.ForEach(o =>
                    {
                        var parameterOptions = parameterDomains.FindAll(i => i.ActualOption == o);
                        actualFiniteStateLists.ForEach(stateList => stateList.ActualState.ForEach(s =>
                        {
                            var parameterStates = parameterOptions.FindAll(i => i.ActualState == s);
                            var parameterValueSets = parameterStates.FindAll(i => i.Published.SequenceEqual(i.ActualValue));
                            var nbPublishedValues = parameterValueSets.Count;
                            Data.Add(new DataChart()
                            {
                                Value = nbPublishedValues,
                                Argument = "Published values",
                                Domain = d.ShortName,
                                Option = o.Iid,
                                State = s.Iid,
                                Parameters = parameterValueSets
                            });
                            Data.Add(new DataChart()
                            {
                                Value = parameterStates.Count - nbPublishedValues,
                                Argument = "Publishable values",
                                Domain = d.ShortName,
                                Option = o.Iid,
                                State = s.Iid,
                                Parameters = parameterStates.FindAll(p => !parameterValueSets.Contains(p))
                            });
                            parameterOptions.RemoveAll(i => parameterStates.Contains(i));
                        }));
                        var parameterValueSets = parameterOptions.FindAll(i => i.Published.SequenceEqual(i.ActualValue));
                        var nbPublishedValues = parameterValueSets.Count;
                        Data.Add(new DataChart()
                            {
                                Value = nbPublishedValues,
                                Argument = "Published values",
                                Domain = d.ShortName,
                                Option = o.Iid,
                                Parameters = parameterValueSets
                            });
                        Data.Add(new DataChart()
                        {
                            Value = parameterOptions.Count - nbPublishedValues,
                            Argument = "Publishable values",
                            Domain = d.ShortName,
                            Option = o.Iid,
                            Parameters = parameterOptions.FindAll(p => !parameterValueSets.Contains(p))
                        });
                        parameterDomains.RemoveAll(i => parameterOptions.Contains(i));             
                    });
                    var parameterValueSets = parameterDomains.FindAll(i => i.Published.SequenceEqual(i.ActualValue));
                    var nbPublishedValues = parameterValueSets.Count;
                    Data.Add(new DataChart()
                    {
                        Value = nbPublishedValues,
                        Argument = "Published values",
                        Domain = d.ShortName,
                        Parameters = parameterValueSets
                    });
                    Data.Add(new DataChart()
                    {
                        Value = parameterDomains.Count - nbPublishedValues,
                        Argument = "Publishable values",
                        Domain = d.ShortName,
                        Parameters = parameterDomains.FindAll(p => !parameterValueSets.Contains(p))
                    });
                });
            } else
            {
                domains.ForEach(d =>
                {
                    var parameterDomains = sessionParameterValueSets.FindAll(i => i.Owner == d);
                    options.ForEach(o =>
                    {
                        var parameterOptions = parameterDomains.FindAll(i => i.ActualOption == o);
                        var parameterValueSets = parameterOptions.FindAll(i => i.Published.SequenceEqual(i.ActualValue));
                        var nbPublishedValues = parameterValueSets.Count;
                        Data.Add(new DataChart()
                            {
                                Value = nbPublishedValues,
                                Argument = "Published values",
                                Domain = d.ShortName,
                                Option = o.Iid,
                                Parameters = parameterValueSets
                            });
                        Data.Add(new DataChart()
                        {
                            Value = parameterOptions.Count - nbPublishedValues,
                            Argument = "Publishable values",
                            Domain = d.ShortName,
                            Option = o.Iid,
                            Parameters = parameterOptions.FindAll(p => !parameterValueSets.Contains(p))
                        });
                        parameterDomains.RemoveAll(i => parameterOptions.Contains(i));             
                    });
                    var parameterValueSets = parameterDomains.FindAll(i => i.Published.SequenceEqual(i.ActualValue));
                    var nbPublishedValues = parameterValueSets.Count;
                    Data.Add(new DataChart()
                    {
                        Value = nbPublishedValues,
                        Argument = "Published values",
                        Domain = d.ShortName,
                        Parameters = parameterValueSets
                    });
                    Data.Add(new DataChart()
                    {
                        Value = parameterDomains.Count - nbPublishedValues,
                        Argument = "Publishable values",
                        Domain = d.ShortName,
                        Parameters = parameterDomains.FindAll(p => !parameterValueSets.Contains(p))
                    });
                });
            }
        }
    }

    /// <summary>
    /// Filter data to show in the graph
    /// </summary>
    /// <param name="data">List of all data in the project</param>
    /// <returns>The list of filtered <see cref="DataChart"></returns>
    public List<DataChart> Filter(List<DataChart> data)
    {
        List<DataChart> result = new List<DataChart>();
        result.AddRange(data);
        if(this.FilterOption != null)
        {
            result.RemoveAll(d => !d.Option.Equals(this.FilterOption));
        }

        if(this.FilterState != null)
        {   
            result.RemoveAll(d => d.State == null || (d.State != null && !d.State.Equals(this.FilterState)));      
        }
        return result;
    }

}
