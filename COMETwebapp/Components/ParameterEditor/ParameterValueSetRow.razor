<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor
@inject IIterationService IterationService

@if(this.Parameter != null && this.ParameterValueSet != null)
{
    var modelCode = this.ParameterValueSet.ModelCode().Split("\\");
    var colorToApply = string.Empty;
    if (this.isParameterValueSetEdited == true)
    {
        colorToApply = "color-title";
    }
    var valueSwitchToShow = this.ParameterValueSet.ValueSwitch;
    if(this.selectedSwitchKind != null)
    {
        valueSwitchToShow = (ParameterSwitchKind) Enum.Parse(typeof(ParameterSwitchKind), this.selectedSwitchKind);
    }
    <BSTR AlignRow="AlignRow.Middle">
        <BSTD Class="width-10">
            <div class="@colorToApply">
                @Parameter.ParameterType.Name
            </div>
        </BSTD>
        @if(modelCode.Count() == 1)
        {
            <BSTD Class="width-20">
                <div class="@colorToApply">
                    @modelCode[0]
                </div>
            </BSTD>
        } else if(modelCode.Count()  == 2)
        {
            if (this.Parameter.IsOptionDependent)
            {
                <BSTD>
                    <div class="@colorToApply">
                        @modelCode[0]
                        <div>
                            Option: @modelCode[1]
                        </div>
                    </div>
                </BSTD>
            } else if (this.Parameter.StateDependence != null)
            {
                <BSTD>
                    <div class="@colorToApply">
                        @modelCode[0]
                        <div>
                            State: @modelCode[1]
                        </div>
                    </div>
                </BSTD>
            }

        } else if(modelCode.Count() > 2)
        {
            <BSTD>
                <div class="@colorToApply">
                    @modelCode[0]
                    <div>
                        Option: @modelCode[1]
                    </div>
                    <div>
                        State: @modelCode[2]
                    </div>
                </div>
            </BSTD>
        }
        @if(this.Parameter.ParameterType.NumberOfValues == 1)
        {
            var enumerationValueDefinitions = new List<EnumerationValueDefinition>();
            if(this.Parameter.ParameterType is EnumerationParameterType)
            {
                var parameterType = (EnumerationParameterType)this.Parameter.ParameterType;
                enumerationValueDefinitions.AddRange(parameterType.ValueDefinition);
            } else
            {
                enumerationValueDefinitions = null;
            }
            <BSTD Class="width-20">
                <ScalarParameter 
                    Value="@ParameterValueSet.Published.First()" 
                    Scale="@Parameter.Scale?.ShortName" 
                    ValueType="@Parameter.ParameterType.GetType()"
                    IsParameterValueSetEdited="@isParameterValueSetEdited" />
            </BSTD>
            @if(valueSwitchToShow == ParameterSwitchKind.COMPUTED)
            {
                <BSTD Class="width-30">
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <ScalarParameter 
                                    Value="@ParameterValueSet.Computed.First()" 
                                    Scale="@Parameter.Scale?.ShortName" 
                                    ValueType="@Parameter.ParameterType.GetType()"
                                    IsParameterValueSetEdited="@isParameterValueSetEdited" />
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip
                                    ParameterValueSetIid="@ParameterValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                    SwitchValue="valueSwitchToShow" 
                                    IsEditable="@IsEditable()">
                                    <button type="button" class="btn btn-secondary btn-tooltip">C</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                </BSTD>
            } else if(valueSwitchToShow == ParameterSwitchKind.MANUAL)
            {
                <BSTD Class="width-30">
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <ScalarParameter 
                                    Value="@ParameterValueSet.Manual.First()" 
                                    Scale="@Parameter.Scale?.ShortName" 
                                    ValueType="@Parameter.ParameterType.GetType()"
                                    EnumerationValueDefinitions="@enumerationValueDefinitions"
                                    ParameterValueSet="@ParameterValueSet" 
                                    IndexInValueSet="0" IsManualEditable="@IsEditable()" 
                                    IsParameterValueSetEdited="@isParameterValueSetEdited" />
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip
                                    ParameterValueSetIid="@ParameterValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                    SwitchValue="valueSwitchToShow" 
                                    IsEditable="@IsEditable()">
                                    <button type="button" class="btn btn-secondary btn-tooltip">M</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                </BSTD>
            } else
            {
                <BSTD Class="width-30">
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                            <ScalarParameter 
                                Value="@ParameterValueSet.Reference.First()" 
                                Scale="@Parameter.Scale?.ShortName" 
                                ParameterValueSet="@ParameterValueSet"
                                ValueType="@Parameter.ParameterType.GetType()"
                                EnumerationValueDefinitions="@enumerationValueDefinitions"
                                IndexInValueSet="0" IsReferenceEditable="@IsEditable()" 
                                IsParameterValueSetEdited="@isParameterValueSetEdited" />
                        </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip
                                    ParameterValueSetIid="@ParameterValueSet.Iid" 
                                    SwitchValue="valueSwitchToShow"
                                    ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                    IsEditable="@IsEditable()">
                                    <button type="button" class="btn btn-secondary btn-tooltip">R</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                </BSTD>
            }
        } else if(this.Parameter.ParameterType.GetType().Equals(typeof(ArrayParameterType)))
        {
            <BSTD Class="width-20">
                <ArrayParameter 
                    ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" 
                    Values="@ParameterValueSet.Published" 
                    IsParameterValueSetEdited="@isParameterValueSetEdited" />
            </BSTD>
            @if(valueSwitchToShow == ParameterSwitchKind.COMPUTED)
            {
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <BSTD Class="width-30">
                                <ArrayParameter 
                                    ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" 
                                    Values="@ParameterValueSet.Computed" 
                                    IsParameterValueSetEdited="@isParameterValueSetEdited" />
                            </BSTD>
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip
                                ParameterValueSetIid="@ParameterValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                SwitchValue="valueSwitchToShow" 
                                IsEditable="@IsEditable()">
                                <button type="button" class="btn btn-secondary btn-tooltip">C</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            } else if(valueSwitchToShow == ParameterSwitchKind.MANUAL)
            {
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <BSTD Class="width-30">
                                <ArrayParameter 
                                    ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" 
                                    Values="@ParameterValueSet.Manual" 
                                    ParameterValueSet="@ParameterValueSet" 
                                    IndexStartInValueSet="0" 
                                    IsManualEditable="@IsEditable()" 
                                    IsParameterValueSetEdited="@isParameterValueSetEdited"/>
                            </BSTD>
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip 
                                ParameterValueSetIid="@ParameterValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                SwitchValue="valueSwitchToShow" 
                                IsEditable="@IsEditable()">
                                <button type="button" class="btn btn-secondary btn-tooltip">M</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            } else
            {
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <BSTD Class="width-30">
                                <ArrayParameter 
                                    ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" 
                                    Values="@ParameterValueSet.Reference" 
                                    ParameterValueSet="@ParameterValueSet" 
                                    IndexStartInValueSet="0" 
                                    IsReferenceEditable="@IsEditable()" 
                                    IsParameterValueSetEdited="@isParameterValueSetEdited"/>
                            </BSTD>
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip 
                                ParameterValueSetIid="@ParameterValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                SwitchValue="valueSwitchToShow" 
                                IsEditable="@IsEditable()">
                                <button type="button" class="btn btn-secondary btn-tooltip">R</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            }
        } else
        {
            var compoundParameterType = (CompoundParameterType)this.Parameter.ParameterType;
            var components = compoundParameterType?.Component.ToList();
            if (components != null && compoundParameterType != null)
            {
                <BSTD Class="width-20">
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach (var component in components)
                        {
                            var indexStart = 0;
                            for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter 
                                IndexStartInParameterTypeComponent="indexStart" 
                                Values="@ParameterValueSet.Published" 
                                Component="component" 
                                IsParameterValueSetEdited="@isParameterValueSetEdited"/>
                        }
                    </div>                                                
                </BSTD>
                @if(valueSwitchToShow == ParameterSwitchKind.COMPUTED)
                {
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <BSTD Class="width-30">
                                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                        @foreach (var component in components)
                                        {
                                            var indexStart = 0;
                                            for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                            {
                                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                            }
                                            <CompoundParameter 
                                                IndexStartInParameterTypeComponent="indexStart" 
                                                Values="@ParameterValueSet.Computed" 
                                                Component="component" 
                                                IsParameterValueSetEdited="@isParameterValueSetEdited"/>
                                        }
                                    </div>                                                    
                                </BSTD>
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip 
                                    ParameterValueSetIid="@ParameterValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                    SwitchValue="valueSwitchToShow" 
                                    IsEditable="@IsEditable()">
                                    <button type="button" class="btn btn-secondary btn-tooltip">C</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                } else if(valueSwitchToShow == ParameterSwitchKind.MANUAL)
                {
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <BSTD Class="width-30">
                                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                        @foreach(var component in components)
                                        {
                                            var indexStart = 0;
                                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                            {
                                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                            }
                                            <CompoundParameter 
                                                IndexStartInParameterTypeComponent="indexStart" 
                                                Values="@ParameterValueSet.Manual" 
                                                Component="component" 
                                                ParameterValueSet="@ParameterValueSet" 
                                                IsManualEditable="@IsEditable()" 
                                                IsParameterValueSetEdited="@isParameterValueSetEdited" />
                                        }
                                    </div>                                               
                                </BSTD>
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip 
                                    ParameterValueSetIid="@ParameterValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                    SwitchValue="valueSwitchToShow" 
                                    IsEditable="@IsEditable()">
                                    <button type="button" class="btn btn-secondary btn-tooltip">M</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                } else
                {
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <BSTD Class="width-30">
                                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                        @foreach(var component in components)
                                        {
                                            var indexStart = 0;
                                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                            {
                                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                            }
                                            <CompoundParameter 
                                                IndexStartInParameterTypeComponent="indexStart" 
                                                Values="@ParameterValueSet.Reference" 
                                                Component="component" 
                                                ParameterValueSet="@ParameterValueSet" 
                                                IsReferenceEditable="@IsEditable()" 
                                                IsParameterValueSetEdited="@isParameterValueSetEdited" />
                                        }
                                    </div>
                                </BSTD>
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip 
                                    ParameterValueSetIid="@ParameterValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterValueSet.ValueSwitch"
                                    SwitchValue="valueSwitchToShow" 
                                    IsEditable="@IsEditable()">
                                    <button type="button" class="btn btn-secondary btn-tooltip">R</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                }
            }
        }
        <BSTD Class="width-10">
            <div class="@colorToApply">
                @Parameter.Owner.ShortName
            </div>
        </BSTD>
    </BSTR>
}

@code {
    /// <summary>
    /// The ParameterValueSet to show in the table
    /// </summary>
    [Parameter]
    public ParameterValueSetBase? ParameterValueSet { get; set; }

    /// <summary>
    /// The associated Parameter to show
    /// </summary>
    [Parameter]
    public ParameterOrOverrideBase? Parameter { get; set; }

    /// <summary>
    /// Sets if ParameterValueSet was edited
    /// </summary>
    private bool? isParameterValueSetEdited { get; set; }

    /// <summary>
    /// ParameterSwitchKind to show
    /// </summary>
    private string? selectedSwitchKind { get; set; }

    /// <summary>
    /// Listeners for the components to update it with edit changes
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize ClonedParameterValueSet 
    /// </summary>
    protected override void OnInitialized()
    {
        if (this.ParameterValueSet != null && this.IsEditable())
        {
            this.isParameterValueSetEdited = this.IterationService.NewUpdates.Contains(this.ParameterValueSet.Iid);
        }

        if (!this.listeners.TryGetValue("NewUpdate", out var listener)) {
            this.listeners.Add("NewUpdate", CDPMessageBus.Current.Listen<NewUpdateEvent>().Where(x => x.UpdatedThingIid == this.ParameterValueSet?.Iid).Subscribe(x =>
            {
                this.isParameterValueSetEdited = true;
                this.StateHasChanged();
            }));
        }

        if (!this.listeners.TryGetValue("SwitchMode", out listener)) {
            this.listeners.Add("SwitchMode", CDPMessageBus.Current.Listen<SwitchEvent>().Where(x => x.ParameterValuSetIid == this.ParameterValueSet?.Iid).Subscribe(x =>
            {
                if (x.SubmitChange == null)
                {
                    this.selectedSwitchKind = x.SelectedSwitch.ToString();
                    this.StateHasChanged();
                } else if (x.SubmitChange == true) {
                    this.UpdateChange(x.SelectedSwitch);
                }
            }));
        }
    }

    /// <summary>
    /// Tells if ParameterValueSet is editable
    /// A <see cref="ParameterValueSetBase"> is editable if it is owned by the active <see cref="DomainOfExpertise">
    /// </summary>
    private bool IsEditable()
    {
        if(this.ParameterValueSet?.Owner == this.ISessionAnchor.CurrentDomainOfExpertise)
        {
            return true;
        } else
        {
            return false;
        }
    }

    /// <summary>
    /// Update value of <see cref="ParameterValueSet"> when a change appears 
    /// </summary>
    private void UpdateChange(ParameterSwitchKind newValue)
    {
        if (this.ParameterValueSet != null)
        {
            if(this.IsEditable() && !this.IterationService.NewUpdates.Contains(this.ParameterValueSet.Iid))
            {
                this.IterationService.NewUpdates.Add(this.ParameterValueSet.Iid);
                CDPMessageBus.Current.SendMessage<NewUpdateEvent>(new NewUpdateEvent(this.ParameterValueSet.Iid));
            }
            var clonedParameterValueSet = this.ParameterValueSet.Clone(false);
            clonedParameterValueSet.ValueSwitch = newValue;
            this.ISessionAnchor.UpdateThings(new List<Thing>()
            {
                clonedParameterValueSet
            });
        }
    }
}
