<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor

@if(this.Parameter != null && this.ParameterValueSet != null)
{
    var modelCode = this.ParameterValueSet.ModelCode().Split("\\");
    
    <BSTR AlignRow="AlignRow.Middle">
        <BSTD>@Parameter.ParameterType.Name</BSTD>
        @if(modelCode.Count() == 1)
        {
            <BSTD>@modelCode[0]</BSTD>
        } else if(modelCode.Count()  == 2)
        {
            if (this.Parameter.IsOptionDependent)
            {
                <BSTD>
                    @modelCode[0]
                    <div>
                        Option: @modelCode[1]
                    </div>
                </BSTD>
            } else if (this.Parameter.StateDependence != null)
            {
                <BSTD>
                    @modelCode[0]
                    <div>
                        State: @modelCode[1]
                    </div>
                </BSTD>
            }

        } else if(modelCode.Count() > 2)
        {
            <BSTD>
                @modelCode[0]
                <div>
                    Option: @modelCode[1]
                </div>
                <div>
                    State: @modelCode[2]
                </div>
            </BSTD>
        }
        @if(this.Parameter.ParameterType.NumberOfValues == 1)
        {
            <BSTD>
                <ScalarParameter Value="@ParameterValueSet.Published.First()" Scale="@Parameter.Scale?.ShortName" />
            </BSTD>
            <BSTD>
                <ScalarParameter Value="@GetActualValue().First()" Scale="@Parameter.Scale?.ShortName" />
            </BSTD>
            <BSTD>
                <ScalarParameter Value="@ParameterValueSet.Computed.First()" Scale="@Parameter.Scale?.ShortName" />
            </BSTD>
            <BSTD>
                <ScalarParameter Value="@GetManualValue().First()" Scale="@Parameter.Scale?.ShortName" ParameterValueSet="@GetParameterValueSetBase()" IndexInValueSet="0" IsManualEditable="@IsEditable()" IsEditionMode="@IsEditionMode"/>
            </BSTD>
            <BSTD>
                <ScalarParameter Value="@GetReferenceValue().First()" Scale="@Parameter.Scale?.ShortName" ParameterValueSet="@GetParameterValueSetBase()" IndexInValueSet="0" IsReferenceEditable="@IsEditable()" IsEditionMode="@IsEditionMode"/>
            </BSTD>
        } else if(this.Parameter.ParameterType.GetType().Equals(typeof(ArrayParameterType)))
        {
            <BSTD>
                <ArrayParameter ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" Values="@ParameterValueSet.Published" />
            </BSTD>
            <BSTD>
                <ArrayParameter ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" Values="@GetActualValue()"/>
            </BSTD>
            <BSTD>
                <ArrayParameter ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" Values="@ParameterValueSet.Computed"/>
            </BSTD>
            <BSTD>
                <ArrayParameter ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" Values="@GetManualValue()" ParameterValueSet="@GetParameterValueSetBase()" IndexStartInValueSet="0" IsManualEditable="@IsEditable()" IsEditionMode="@IsEditionMode"/>
            </BSTD>
            <BSTD>
                <ArrayParameter ArrayParameterType="(ArrayParameterType)this.Parameter.ParameterType" Values="@GetReferenceValue()" ParameterValueSet="@GetParameterValueSetBase()" IndexStartInValueSet="0" IsReferenceEditable="@IsEditable()" IsEditionMode="@IsEditionMode"/>
            </BSTD>
        } else
        {
            var compoundParameterType = (CompoundParameterType)this.Parameter.ParameterType;
            var components = compoundParameterType?.Component.ToList();
            if(components != null && compoundParameterType != null)
            {
                <BSTD>
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach(var component in components)
                        {
                            var indexStart = 0;
                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter IndexStartInParameterTypeComponent="indexStart" Values="@ParameterValueSet.Published" Component="component"/>
                        }
                    </div>                                                
                </BSTD>
                <BSTD>
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach(var component in components)
                        {
                            var indexStart = 0;
                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter IndexStartInParameterTypeComponent="indexStart" Values="@GetActualValue()" Component="component"/>
                        }
                    </div>                                               
                </BSTD>
                <BSTD>
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach(var component in components)
                        {
                            var indexStart = 0;
                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter IndexStartInParameterTypeComponent="indexStart" Values="@ParameterValueSet.Computed" Component="component"/>
                        }
                    </div>                                                    
                </BSTD>
                <BSTD>
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach(var component in components)
                        {
                            var indexStart = 0;
                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter IndexStartInParameterTypeComponent="indexStart" Values="@GetManualValue()" Component="component" ParameterValueSet="@GetParameterValueSetBase()" IsManualEditable="@IsEditable()" IsEditionMode="@IsEditionMode"/>
                        }
                    </div>                                               
                </BSTD>
                <BSTD>
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach(var component in components)
                        {
                            var indexStart = 0;
                            for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter IndexStartInParameterTypeComponent="indexStart" Values="@GetReferenceValue()" Component="component" ParameterValueSet="@GetParameterValueSetBase()" IsReferenceEditable="@IsEditable()" IsEditionMode="@IsEditionMode"/>
                        }
                    </div>
                </BSTD>
            }
        }
        <BSTD>@ParameterValueSet.ValueSwitch.ToString()</BSTD>
        <BSTD>@Parameter.Owner.ShortName</BSTD>
    </BSTR>
}

@code {
    /// <summary>
    /// The ParameterValueSet to show in the table
    /// </summary>
    [Parameter]
    public ParameterValueSetBase? ParameterValueSet { get; set; }

    /// <summary>
    /// The associated Parameter to show
    /// </summary>
    [Parameter]
    public ParameterOrOverrideBase? Parameter { get; set; }

    /// <summary>
    /// Sets edition mode activate
    /// </summary>
    [Parameter]
    public bool? IsEditionMode { get; set; }

    /// <summary>
    /// The cloned <see cref="ParameterValueSetBase">
    /// </summary>
    public ParameterValueSetBase? ClonedParameterValueSet { get; set; }

    /// <summary>
    /// Initialize ClonedParameterValueSet 
    /// </summary>
    protected override void OnInitialized()
    {
        if (this.ParameterValueSet != null && this.IsEditable())
        {
            this.ClonedParameterValueSet = this.ParameterValueSet.Clone(false);
        }
    }

    /// <summary>
    /// Tells if ParameterValueSet is editable
    /// A <see cref="ParameterValueSetBase"> is editable if it is owned by the active <see cref="DomainOfExpertise">
    /// </summary>
    private bool IsEditable()
    {
        if(this.ParameterValueSet.Owner == this.ISessionAnchor.CurrentDomainOfExpertise)
        {
            return true;
        } else
        {
            return false;
        }
    }

    /// <summary>
    /// Gets the ParameterValueSetBase to edit
    /// </summary>
    /// <returns>The associated clone if ParameterValueSetBase is editable</returns>
    private ParameterValueSetBase GetParameterValueSetBase()
    {
        if (IsEditable())
        {
            return this.ClonedParameterValueSet;
        } else
        {
            return this.ParameterValueSet;
        }
    }

    /// <summary>
    /// Gets the ParameterValueSetBase actual value
    /// </summary>
    /// <returns>The associated clone actual value if ParameterValueSetBase is editable</returns>
    private ValueArray<string> GetActualValue()
    {
        if (IsEditable())
        {
            return this.ClonedParameterValueSet?.ActualValue;
        } else
        {
            return this.ParameterValueSet?.ActualValue;
        }
    }

    /// <summary>
    /// Gets the ParameterValueSetBase manual value
    /// </summary>
    /// <returns>The associated clone manual value if ParameterValueSetBase is editable</returns>
    private ValueArray<string> GetManualValue()
    {
        if (IsEditable())
        {
            return this.ClonedParameterValueSet?.Manual;
        } else
        {
            return this.ParameterValueSet?.Manual;
        }
    }

    /// <summary>
    /// Gets the ParameterValueSetBase reference value
    /// </summary>
    /// <returns>The associated clone reference value if ParameterValueSetBase is editable</returns>
    private ValueArray<string> GetReferenceValue()
    {
        if (IsEditable())
        {
            return this.ClonedParameterValueSet?.Reference;
        } else
        {
            return this.ParameterValueSet?.Reference;
        }
    }
}
