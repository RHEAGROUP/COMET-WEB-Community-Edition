<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.EngineeringModelData
@using COMETwebapp.Services.SessionManagement
@using COMETwebapp.SessionManagement
@using COMETwebapp.ViewModels.Components.ParameterEditor

@if (this.Elements is null)
{
    return;
}

<div class="container-fluid" style="min-width: 1400px; margin-top: 2%;">
    <DxGrid CssClass="default-grid"
            ShowAllRows="true"
            Data="@this.ViewModel.Rows.Items"
            SelectionMode="GridSelectionMode.Single"
            AllowSelectRowByClick="false"
            ShowFilterRow="true"
            ShowGroupPanel="true"
            FocusedRowEnabled="true"
            DetailExpandButtonDisplayMode="GridDetailExpandButtonDisplayMode.Auto">
        <Columns>
            <DxGridDataColumn FieldName="@nameof(IParameterBaseRowViewModel.ElementBaseName)" GroupIndex="0" GroupInterval="GridColumnGroupInterval.Value" Caption="@("Element")" AllowSort="true"/>
            <DxGridDataColumn FieldName="@nameof(IParameterBaseRowViewModel.ParameterTypeName)" Caption="@("Parameter")" AllowGroup="false" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(IParameterBaseRowViewModel.ParameterModelCode)" Caption="@("Model Code")" AllowGroup="false" AllowSort="true" />
            <DxGridDataColumn FieldName="@nameof(IParameterBaseRowViewModel.Parameter)" Caption="@("Published Value")" AllowGroup="false" AllowSort="true">
                <CellDisplayTemplate>
                    <p>ValueSet Editors</p>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(IParameterBaseRowViewModel.Parameter)" Caption="@("Value")" AllowGroup="false" AllowSort="true">
                <CellDisplayTemplate>
                    <p>Switch component</p>
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(IParameterBaseRowViewModel.ParameterOwnerName)" Caption="@("Owner")" AllowGroup="false" AllowSort="true" />
        </Columns>
    </DxGrid>

    <BSTable IsBordered="false" IsStriped="true" Class="text-align-center">
        <BSTHead>
            <BSTR>
                <BSTD>
                    <div class="row">
                        <div style="width: 15%;">Element</div>
                        <div style="width: 15%;">Parameter</div>
                        <div style="width: 15%;">Model Code</div>
                        <div style="width: 15%;">Published Value</div>
                        <div style="width: 15%;">Value</div>
                        <div style="width: 15%; padding: 0px 92px;">Owner</div>
                    </div>
                </BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            <div style="overflow-y:scroll">
                @foreach (var element in this.Elements.Items)
                {
                    <div style="padding-right: 0px; border-bottom-color: black; border-bottom-style: double;">
                        <BSTR AlignRow="AlignRow.Middle">
                            <BSTD>@element.Name</BSTD>
                            <BSTD>
                                <BSTable IsBordered="false" IsStriped="true" Class="text-align-center margin-bottom-0">
                                    <BSTBody>

                                        @if (element is ElementDefinition elementDefinition)
                                        {
                                            @if (elementDefinition.Parameter.Count != 0)
                                            {
                                                foreach (var parameter in this.ViewModel.FilterParameters(elementDefinition.Parameter))
                                                {
                                                    var valueSet = new List<ParameterValueSetBase>();
                                                    valueSet.AddRange(parameter.ValueSet);
                                                    foreach (var parameterValueSet in this.ViewModel.FilterParameterValueSetBase(parameter.IsOptionDependent, valueSet))
                                                    {
                                                        <ParameterValueSetRow Parameter="parameter" ParameterValueSet="parameterValueSet" />
                                                    }
                                                }
                                            }
                                        }
                                        else if (element is ElementUsage elementUsage)
                                        {
                                            @if (elementUsage.ParameterOverride.Count == 0)
                                            {
                                                foreach (var parameter in this.ViewModel.FilterParameters(elementUsage.ElementDefinition.Parameter))
                                                {
                                                    var valueSet = new List<ParameterValueSetBase>();
                                                    valueSet.AddRange(parameter.ValueSet);
                                                    foreach (var parameterValueSet in this.ViewModel.FilterParameterValueSetBase(parameter.IsOptionDependent, valueSet))
                                                    {
                                                        <ParameterValueSetRow Parameter="parameter" ParameterValueSet="parameterValueSet" />
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var paremetersOrOverrides = new List<ParameterOrOverrideBase>();
                                                paremetersOrOverrides.AddRange(this.ViewModel.FilterParameterOverrides(elementUsage.ParameterOverride));
                                                var associatedParameters = new List<Parameter>();
                                                associatedParameters.AddRange(elementUsage.ParameterOverride.Select(p => p.Parameter).ToList());
                                                paremetersOrOverrides.AddRange(this.ViewModel.FilterParameters(elementUsage.ElementDefinition.Parameter.FindAll(p => !associatedParameters.Contains(p))));

                                                foreach (var item in paremetersOrOverrides.OrderBy(p => p.ParameterType.Name).ToList())
                                                {
                                                    var valueSet = new List<ParameterValueSetBase>();
                                                    if (item is Parameter parameter)
                                                    {
                                                        valueSet.AddRange(parameter.ValueSet);
                                                    }
                                                    else if (item is ParameterOverride parameterOverride)
                                                    {
                                                        valueSet.AddRange(parameterOverride.ValueSet);
                                                    }

                                                    foreach (var parameterValueSet in this.ViewModel.FilterParameterValueSetBase(item.IsOptionDependent, valueSet))
                                                    {
                                                        <ParameterValueSetRow Parameter="item" ParameterValueSet="parameterValueSet" />
                                                    }
                                                }
                                            }
                                        }
                                    </BSTBody>
                                </BSTable>
                            </BSTD>
                        </BSTR>
                    </div>
                }
            </div>
        </BSTBody>
    </BSTable>
</div>
