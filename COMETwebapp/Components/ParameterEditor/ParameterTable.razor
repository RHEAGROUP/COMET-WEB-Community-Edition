<!------------------------------------------------------------------------------
// Copyright (c) 2023 RHEA System S.A.
//
//     Authors: Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar, Théate Antoine Nabil Abbar
//
//     This file is part of COMET WEB Community Edition
//      The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.
//
//     The COMET WEB Community Edition is free software; you can redistribute it and/or
//     modify it under the terms of the GNU Affero General Public
//     License as published by the Free Software Foundation; either
//     version 3 of the License, or (at your option) any later version.
//
//     The COMET WEB Community Edition is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
//     Affero General Public License for more details.
//
//     You should have received a copy of the GNU Affero General Public License
//     along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.EngineeringModelData
@using CDP4Common.SiteDirectoryData
@using COMETwebapp.ViewModels.Components.ParameterEditor
@inherits DisposableComponent

<DxPopup @bind-Visible="@this.ViewModel.IsOnEditMode" HeaderText="Edit Compound ParameterType" Width="auto" CloseOnOutsideClick="false">
        <CompoundParameterTypeEditor ViewModel="this.ViewModel.CompoundParameterTypeEditorViewModel" />
</DxPopup>

<div class="container-fluid table-container">
    <DxGrid @ref="Grid"
            CssClass="default-grid"
            ShowAllRows="true"
            Data="@this.sortedCollection"
            SelectionMode="GridSelectionMode.Single"
            AllowSelectRowByClick="false"
            ShowFilterRow="true"
            DetailExpandButtonDisplayMode="GridDetailExpandButtonDisplayMode.Auto"
            CustomizeEditModel="CustomizeEditElementDefinition"
            PopupEditFormCssClass="pw-800"
            PopupEditFormHeaderText="Create Element Definition"
            EditMode="GridEditMode.PopupEditForm"
            EditModelSaving="this.ViewModel.AddingElementDefinition"
            VerticalScrollBarMode="ScrollBarMode.Visible"
            HorizontalScrollBarMode="ScrollBarMode.Visible">
        <Columns>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ElementBaseName)" GroupIndex="0" GroupInterval="GridColumnGroupInterval.Value" Caption="@("Element Name")" AllowSort="true"/>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ParameterName)" Caption="@("Parameter")" AllowGroup="false" AllowSort="true"/>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.Option)" Caption="@("Option")" AllowGroup="false" AllowSort="true"/>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.State)" Caption="@("State")" AllowGroup="false" AllowSort="true"/>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.PublishedValue)" Caption="@("Published Value")" AllowGroup="false" AllowSort="false" />
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ParameterType)" Caption="@("Value")" AllowGroup="false" AllowSort="false">
                <CellDisplayTemplate>
                    @if (context.DataItem is ParameterBaseRowViewModel parameterBaseRowViewModel)
                    {
                        <ParameterTypeEditorSelector ViewModel="parameterBaseRowViewModel.ParameterTypeEditorSelectorViewModel" 
                                                     BindValueMode="BindValueMode.OnLostFocus"/>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.Switch)" Caption="@("Switch")" AllowGroup="false" AllowSort="true">
                <CellDisplayTemplate>
                    @if (context.DataItem is ParameterBaseRowViewModel parameterBaseRowViewModel)
                    {
                        <ParameterSwitchKindSelector ViewModel="parameterBaseRowViewModel.ParameterSwitchKindSelectorViewModel"/>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.ModelCode)" Caption="@("Model Code")" AllowGroup="false" AllowSort="true"/>
            <DxGridDataColumn FieldName="@nameof(ParameterBaseRowViewModel.OwnerName)" Caption="@("Owner")" AllowGroup="false" AllowSort="true" />
            <DxGridCommandColumn Width="200px" EditButtonVisible="false" DeleteButtonVisible="false" >
                <HeaderTemplate>
                    <DxButton Id="addElementButton" Text="Add an Element Definition" IconCssClass="oi oi-plus" Click="() => Grid.StartEditNewRowAsync()" />
                </HeaderTemplate>
            </DxGridCommandColumn>
        </Columns>
        <EditFormTemplate Context="EditFormContext">
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutTabPages>
                    <DxFormLayoutTabPage Caption="Basic">
                        <DxFormLayoutItem Caption="Shortname:" ColSpanMd="10">
                            <DxTextBox @bind-Text="@this.ViewModel.ElementDefinition.ShortName" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Name:" ColSpanMd="10">
                            <DxTextBox @bind-Text="@this.ViewModel.ElementDefinition.Name" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Owner:" ColSpanMd="10">
                            <DxComboBox Data="@this.ViewModel.AvailableDomains"
                                        TextFieldName="@nameof(DomainOfExpertise.Name)"
                                        @bind-Value="@this.ViewModel.ElementDefinition.Owner" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Is Top Element:" ColSpanMd="6">
                            <DxCheckBox @bind-Checked="@this.ViewModel.IsTopElement" />
                        </DxFormLayoutItem>
                    </DxFormLayoutTabPage>
                    <DxFormLayoutTabPage Caption="Category">
                        <DxListBox Data="@this.ViewModel.AvailableCategories"
                                   @bind-Values="@this.ViewModel.SelectedCategories"
                                   SelectionMode="ListBoxSelectionMode.Multiple"
                                   TextFieldName="@nameof(Category.Name)"
                                   ShowCheckboxes="true" />
                    </DxFormLayoutTabPage>
                </DxFormLayoutTabPages>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
</div>
