<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft, Jaime Bernar

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.EngineeringModelData
@using COMETwebapp.Services.SessionManagement
@using COMETwebapp.SessionManagement

<div class="container-fluid" style="min-width: 1400px;">
    @if(this.Elements != null)
    {
@*        <DxGrid ShowGroupPanel="true" 
                ShowFilterRow="true"
                Data="this.Elements"
                AllowGroup="true">
            <Columns>
                <DxGridDataColumn FieldName="@nameof(ElementBase.Name)"
                                  Caption="Element"
                                  TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Parameter"
                                  Caption="Parameter"
                                  TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(ElementUsage.ModelCode)"
                                  Caption="Model Code"
                                  TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="PublishedValue"
                                  Caption="Published Value"
                                  TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Value"
                                  Caption="Value"
                                  TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(ElementUsage.Owner)"
                                  Caption="Owner"
                                  TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
            </Columns>
        </DxGrid>*@
        
        <BSTable IsBordered="false" IsStriped="true" Class="text-align-center">
            <BSTHead>
                <BSTR>
                    <BSTD>
                        <div class="row">
                            <div style="width: 15%;">Element</div>
                            <div style="width: 15%;">Parameter</div>
                            <div style="width: 15%;">Model Code</div>
                            <div style="width: 15%;">Published Value</div>
                            <div style="width: 15%;">Value</div>
                            <div style="width: 15%; padding: 0px 92px;">Owner</div>
                        </div>
                    </BSTD>
                </BSTR>
            </BSTHead>
            <BSTBody>
                <div style="overflow-y:scroll">
                    @foreach (var element in this.Elements)
                    {
                        <div style="padding-right: 0px; border-bottom-color: black; border-bottom-style: double;">
                            <BSTR AlignRow="AlignRow.Middle">
                                <BSTD>@element.Name</BSTD>
                                <BSTD>
                                    <BSTable IsBordered="false" IsStriped="true" Class="text-align-center margin-bottom-0">
                                        <BSTBody>
                                            @if (element.GetType().Equals(typeof(ElementDefinition)))
                                            {
                                                var elementDefinition = (ElementDefinition)element;
                                                @if (elementDefinition != null && elementDefinition.Parameter.Count != 0)
                                                {
                                                    foreach (var parameter in FilterParameters(elementDefinition.Parameter))
                                                    {
                                                        var valueSet = new List<ParameterValueSetBase>();
                                                        valueSet.AddRange(parameter.ValueSet);
                                                        foreach (var parameterValueSet in FilterParameterValueSetBase(parameter.IsOptionDependent, valueSet))
                                                        {
                                                            <ParameterValueSetRow Parameter="parameter" ParameterValueSet="parameterValueSet" />
                                                        }
                                                    }
                                                }
                                            } 
                                            else if (element.GetType().Equals(typeof(ElementUsage)))
                                            {
                                                var elementUsage = (ElementUsage)element;
                                                @if(elementUsage.ParameterOverride.Count == 0)
                                                {
                                                    foreach(var parameter in FilterParameters(elementUsage.ElementDefinition.Parameter))
                                                    {
                                                        var valueSet = new List<ParameterValueSetBase>();
                                                        valueSet.AddRange(parameter.ValueSet);
                                                        foreach(var parameterValueSet in FilterParameterValueSetBase(parameter.IsOptionDependent, valueSet))
                                                        {
                                                            <ParameterValueSetRow Parameter="parameter" ParameterValueSet="parameterValueSet" />
                                                        }
                                                    }
                                                } else
                                                {
                                                    var parameters = new List<ParameterOrOverrideBase>();
                                                    parameters.AddRange(FilterParameterOverrides(elementUsage.ParameterOverride));
                                                    var associatedParameters = new List<Parameter>();
                                                    associatedParameters.AddRange(elementUsage.ParameterOverride.Select(p => p.Parameter).ToList());
                                                    parameters.AddRange(FilterParameters(elementUsage.ElementDefinition.Parameter.FindAll(p => !associatedParameters.Contains(p))));
                                                    foreach(var parameter in parameters.OrderBy(p => p.ParameterType.Name).ToList())
                                                    {
                                                        var valueSet = new List<ParameterValueSetBase>();
                                                        if(parameter is Parameter)
                                                        {
                                                            var p = (Parameter)parameter;
                                                            valueSet.AddRange(p.ValueSet);
                                                        } else if (parameter is ParameterOverride)
                                                        {
                                                            var p = (ParameterOverride)parameter;
                                                            valueSet.AddRange(p.ValueSet);
                                                        }

                                                        foreach(var parameterValueSet in FilterParameterValueSetBase(parameter.IsOptionDependent, valueSet))
                                                        {
                                                            <ParameterValueSetRow Parameter="parameter" ParameterValueSet="parameterValueSet" />
                                                        }
                                                    }
                                                }
                                            }
                                        </BSTBody>
                                    </BSTable>
                                </BSTD>
                            </BSTR>
                        </div>
                    }
                </div>
            </BSTBody>
        </BSTable>
    }
</div>
