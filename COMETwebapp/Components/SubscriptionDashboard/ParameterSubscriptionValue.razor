<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@implements IDisposable
@inject ISessionAnchor ISessionAnchor
@inject IIterationService IterationService

@if(this.ParameterSubscription != null && this.ParameterSubscriptionValueSet != null && this.IsParameterSubscriptionValueSetEdited != null)
{
    @if(this.ParameterSubscription.ParameterType.NumberOfValues == 1)
    {
        var enumerationValueDefinitions = new List<EnumerationValueDefinition>();
        if(this.ParameterSubscription.ParameterType is EnumerationParameterType)
        {
            var parameterType = (EnumerationParameterType)this.ParameterSubscription.ParameterType;
            enumerationValueDefinitions.AddRange(parameterType.ValueDefinition);
        } else
        {
            enumerationValueDefinitions = null;
        }
        @if(this.ValueSwitchToShow == ParameterSwitchKind.COMPUTED)
        {
            <BSTD Class="width-20">
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            @if(this.IsUpdated == true)
                            {
                                <span class="badge rounded-pill bg-dark font-weight-100 font-size-bs-body">
                                    <ScalarParameter 
                                        Value="@ParameterSubscriptionValueSet.Computed.First()" 
                                        Scale="@ParameterSubscription.Scale?.ShortName" 
                                        ValueType="@ParameterSubscription.ParameterType.GetType()"
                                        IsParameterValueSetEdited="false" />
                                </span>
                            } else
                            {
                                <ScalarParameter 
                                    Value="@ParameterSubscriptionValueSet.Computed.First()" 
                                    Scale="@ParameterSubscription.Scale?.ShortName" 
                                    ValueType="@ParameterSubscription.ParameterType.GetType()"
                                    IsParameterValueSetEdited="false" />
                            }
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip
                                ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                SwitchValue="this.ValueSwitchToShow" 
                                IsEditable="true">
                                <button type="button" class="btn btn-secondary btn-tooltip">C</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            </BSTD>
        } else if(this.ValueSwitchToShow == ParameterSwitchKind.MANUAL)
        {
            <BSTD Class="width-20">
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <ScalarParameter 
                                Value="@ParameterSubscriptionValueSet.Manual.First()" 
                                Scale="@ParameterSubscription.Scale?.ShortName" 
                                ValueType="@ParameterSubscription.ParameterType.GetType()"
                                EnumerationValueDefinitions="@enumerationValueDefinitions"
                                ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet" 
                                IndexInValueSet="0" IsManualEditable="true" 
                                IsParameterValueSetEdited="@IsParameterSubscriptionValueSetEdited" />
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip
                                ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                SwitchValue="this.ValueSwitchToShow" 
                                IsEditable="true">
                                <button type="button" class="btn btn-secondary btn-tooltip">M</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            </BSTD>
        } else
        {
            <BSTD Class="width-20">
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <ScalarParameter 
                                Value="@ParameterSubscriptionValueSet.Reference.First()" 
                                Scale="@ParameterSubscription.Scale?.ShortName" 
                                ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet"
                                ValueType="@ParameterSubscription.ParameterType.GetType()"
                                EnumerationValueDefinitions="@enumerationValueDefinitions"
                                IndexInValueSet="0" IsReferenceEditable="true" 
                                IsParameterValueSetEdited="@IsParameterSubscriptionValueSetEdited" />
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip
                                ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                SwitchValue="this.ValueSwitchToShow"
                                ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                IsEditable="true">
                                <button type="button" class="btn btn-secondary btn-tooltip">R</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            </BSTD>
        }
    } else if(this.ParameterSubscription.ParameterType.GetType().Equals(typeof(ArrayParameterType)))
    {
        @if(this.ValueSwitchToShow == ParameterSwitchKind.COMPUTED)
        {
            <BSTD Class="width-20">
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            @if (this.IsUpdated == true)
                            {
                                <div class="bg-dark font-weight-100 font-size-bs-body" style="color: white; border-radius: 10px;">
                                    <ArrayParameter 
                                        ArrayParameterType="(ArrayParameterType)this.ParameterSubscription.ParameterType" 
                                        Values="@ParameterSubscriptionValueSet.Computed" 
                                        IsParameterValueSetEdited="false" />
                                </div>
                            } else
                            {
                                <ArrayParameter 
                                    ArrayParameterType="(ArrayParameterType)this.ParameterSubscription.ParameterType" 
                                    Values="@ParameterSubscriptionValueSet.Computed" 
                                    IsParameterValueSetEdited="false" />
                            }
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip
                                ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                SwitchValue="this.ValueSwitchToShow" 
                                IsEditable="true">
                                <button type="button" class="btn btn-secondary btn-tooltip">C</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            </BSTD>
        } else if(this.ValueSwitchToShow == ParameterSwitchKind.MANUAL)
        {
            <BSTD Class="width-20">
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <ArrayParameter 
                                ArrayParameterType="(ArrayParameterType)this.ParameterSubscription.ParameterType" 
                                Values="@ParameterSubscriptionValueSet.Manual" 
                                ParameterSubscriptionValueSet ="@ParameterSubscriptionValueSet" 
                                IndexStartInValueSet="0" 
                                IsManualEditable="true" 
                                IsParameterValueSetEdited="@IsParameterSubscriptionValueSetEdited"/>
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip 
                                ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                SwitchValue="this.ValueSwitchToShow" 
                                IsEditable="true">
                                <button type="button" class="btn btn-secondary btn-tooltip">M</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            </BSTD>
        } else
        {
            <BSTD Class="width-20">
                <div class="container-fluid p-0">
                    <div class="row m-0">
                        <div class="col p-0">
                            <ArrayParameter 
                                ArrayParameterType="(ArrayParameterType)this.ParameterSubscription.ParameterType" 
                                Values="@ParameterSubscriptionValueSet.Reference" 
                                ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet" 
                                IndexStartInValueSet="0" 
                                IsReferenceEditable="true" 
                                IsParameterValueSetEdited="@IsParameterSubscriptionValueSetEdited"/>
                        </div>
                        <div class="col-2 align-self-center">
                            <SwitchTooltip 
                                ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                SwitchValue="this.ValueSwitchToShow" 
                                IsEditable="true">
                                <button type="button" class="btn btn-secondary btn-tooltip">R</button>
                            </SwitchTooltip>
                        </div>
                    </div>
                </div>
            </BSTD>
        }
    } else
    {
        var compoundParameterType = (CompoundParameterType)this.ParameterSubscription.ParameterType;
        var components = compoundParameterType?.Component.ToList();
        if (components != null && compoundParameterType != null)
        {
            @if(this.ValueSwitchToShow == ParameterSwitchKind.COMPUTED)
            {
                <BSTD Class="width-20">
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                @if (this.IsUpdated == true)
                                {
                                    <div class="bg-dark font-weight-100 font-size-bs-body" style="color: white ;border-radius: 10px;">
                                        <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                            @foreach (var component in components)
                                            {
                                                var indexStart = 0;
                                                for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                                {
                                                    indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                                }
                                                <CompoundParameter 
                                                    IndexStartInParameterTypeComponent="indexStart" 
                                                    Values="@ParameterSubscriptionValueSet.Computed" 
                                                    Component="component" 
                                                    IsParameterValueSetEdited="false"/>
                                            }
                                        </div>  
                                    </div>
                                } else
                                {
                                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                        @foreach (var component in components)
                                        {
                                            var indexStart = 0;
                                            for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                            {
                                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                            }
                                            <CompoundParameter 
                                                IndexStartInParameterTypeComponent="indexStart" 
                                                Values="@ParameterSubscriptionValueSet.Computed" 
                                                Component="component" 
                                                IsParameterValueSetEdited="false"/>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip 
                                    ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                    SwitchValue="this.ValueSwitchToShow" 
                                    IsEditable="true">
                                    <button type="button" class="btn btn-secondary btn-tooltip">C</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                </BSTD>
            } else if(this.ValueSwitchToShow == ParameterSwitchKind.MANUAL)
            {
                <BSTD Class="width-20">
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                    @foreach(var component in components)
                                    {
                                        var indexStart = 0;
                                        for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                        {
                                            indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                        }
                                        <CompoundParameter 
                                            IndexStartInParameterTypeComponent="indexStart" 
                                            Values="@ParameterSubscriptionValueSet.Manual" 
                                            Component="component" 
                                            ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet" 
                                            IsManualEditable="true" 
                                            IsParameterValueSetEdited="@IsParameterSubscriptionValueSetEdited" />
                                    }
                                </div>                                               
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip 
                                    ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                    SwitchValue="this.ValueSwitchToShow" 
                                    IsEditable="true">
                                    <button type="button" class="btn btn-secondary btn-tooltip">M</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                </BSTD>
            } else
            {
                <BSTD Class="width-20">
                    <div class="container-fluid p-0">
                        <div class="row m-0">
                            <div class="col p-0">
                                <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                    @foreach(var component in components)
                                    {
                                        var indexStart = 0;
                                        for(int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                        {
                                            indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                        }
                                        <CompoundParameter 
                                            IndexStartInParameterTypeComponent="indexStart" 
                                            Values="@ParameterSubscriptionValueSet.Reference" 
                                            Component="component" 
                                            ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet" 
                                            IsReferenceEditable="true" 
                                            IsParameterValueSetEdited="@IsParameterSubscriptionValueSetEdited" />
                                    }
                                </div>
                            </div>
                            <div class="col-2 align-self-center">
                                <SwitchTooltip 
                                    ParameterValueSetIid="@ParameterSubscriptionValueSet.Iid" 
                                    ParameterValueSetSwitchMode="@ParameterSubscriptionValueSet.ValueSwitch"
                                    SwitchValue="this.ValueSwitchToShow" 
                                    IsEditable="true">
                                    <button type="button" class="btn btn-secondary btn-tooltip">R</button>
                                </SwitchTooltip>
                            </div>
                        </div>
                    </div>
                </BSTD>
            }
        }
    }
}

@code {
    /// <summary>
    /// The ParameterSubscriptionValueSet to show
    /// </summary>
    [Parameter]
    public ParameterSubscriptionValueSet? ParameterSubscriptionValueSet { get; set; }

    /// <summary>
    /// The associated ParameterSubscription
    /// </summary>
    [Parameter]
    public ParameterSubscription? ParameterSubscription { get; set; }

    /// <summary>
    /// The switch mode to show
    /// </summary>
    [Parameter]
    public ParameterSwitchKind ValueSwitchToShow { get; set; }

    /// <summary>
    /// Tells if the ParameterSubscriptionValueSet was edited in the application
    /// </summary>
    [Parameter]
    public bool? IsParameterSubscriptionValueSetEdited { get; set; }

    /// <summary>
    /// Tells if this ParameterSubscriptionValueSet Computede value is updated 
    /// </summary>
    [Parameter]
    public bool? IsUpdated { get; set; }

    /// <summary>
    /// Listeners for the components to update it with edit changes
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize ClonedParameterValueSet 
    /// </summary>
    protected override void OnInitialized()
    {
        if (!this.listeners.TryGetValue("SwitchMode", out var listener)) {
            this.listeners.Add("SwitchMode", CDPMessageBus.Current.Listen<SwitchEvent>().Where(x => x.ParameterValuSetIid == this.ParameterSubscriptionValueSet?.Iid).Subscribe(x =>
            {
                if (x.SubmitChange == null)
                {
                    this.ValueSwitchToShow = x.SelectedSwitch;
                    this.StateHasChanged();
                } else if (x.SubmitChange == true) {
                    this.UpdateChange(x.SelectedSwitch);
                }
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

     /// <summary>
    /// Update value of <see cref="ParameterValueSet"> when a change appears 
    /// </summary>
    private void UpdateChange(ParameterSwitchKind newValue)
    {
        if (this.ParameterSubscriptionValueSet != null)
        {
            if(!this.IterationService.NewUpdates.Contains(this.ParameterSubscriptionValueSet.Iid))
            {
                this.IterationService.NewUpdates.Add(this.ParameterSubscriptionValueSet.Iid);
            }
            var clonedParameterValueSet = this.ParameterSubscriptionValueSet.Clone(false);
            clonedParameterValueSet.ValueSwitch = newValue;
            this.ISessionAnchor.UpdateThings(new List<Thing>()
            {
                clonedParameterValueSet
            });
            this.ParameterSubscriptionValueSet.ValueSwitch = newValue;
            CDPMessageBus.Current.SendMessage<NewUpdateEvent>(new NewUpdateEvent(this.ParameterSubscriptionValueSet.Iid));
        }
    }
}
