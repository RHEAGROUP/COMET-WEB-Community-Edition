<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionService SessionService
@inject IIterationService IterationService
@inject NavigationManager NavigationManager
@using COMETwebapp.Services.IterationServices
@using COMETwebapp.Extensions
@using COMETwebapp.IterationServices
@using COMETwebapp.Model
@using COMETwebapp.SessionManagement
@using CDP4Common.EngineeringModelData
@using CDP4Common.SiteDirectoryData
@using CDP4Common.Types
@using CDP4Dal
@using CDP4Common.CommonData
@using COMETwebapp.Services.SessionManagement
@implements IDisposable

@if(this.ParameterSubscription != null && this.ParameterSubscriptionValueSet != null 
    && this.SubscribedParameterValueSetBase != null && this.ParameterOrOverride != null)
{
    var modelCode = this.ParameterSubscriptionValueSet.ModelCode().Split("\\");
    var valueSwitchToShow = this.ParameterSubscriptionValueSet.ValueSwitch;
    if(this.selectedSwitchKind != null)
    {
        valueSwitchToShow = (ParameterSwitchKind) Enum.Parse(typeof(ParameterSwitchKind), this.selectedSwitchKind);
    }
    this.isUpdated = this.isParameterSubscriptionValueSetUpdated();

    <BSTD Class="width-10">@ParameterSubscription.ParameterType.Name</BSTD>
    @if(modelCode.Count() == 1)
    {
        <BSTD Class="width-10">
            <div>
                @modelCode[0]
            </div>
        </BSTD>
    } else if(modelCode.Count()  == 2)
    {
        if (this.ParameterOrOverride.IsOptionDependent)
        {
            <BSTD Class="width-10">
                <div>
                    @modelCode[0]
                    <div>
                        Option: @modelCode[1]
                    </div>
                </div>
            </BSTD>
        } else if (this.ParameterOrOverride.StateDependence != null)
        {
            <BSTD Class="width-10">
                <div>
                    @modelCode[0]
                    <div>
                        State: @modelCode[1]
                    </div>
                </div>
            </BSTD>
        } else if(modelCode.Count() > 2)
        {
            <BSTD Class="width-10">
                <div>
                    @modelCode[0]
                    <div>
                        Option: @modelCode[1]
                    </div>
                    <div>
                        State: @modelCode[2]
                    </div>
                </div>
            </BSTD>
        }
    }

    <ParameterSubscriptionValue
        ParameterSubscription="@ParameterSubscription"
        ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet"
        IsParameterSubscriptionValueSetEdited="@isParameterSubscriptionValueSetEdited"
        ValueSwitchToShow="@valueSwitchToShow" 
        IsUpdated="@isUpdated"/>

    @if(this.ParameterOrOverride.ParameterType.NumberOfValues == 1)
    {
        var previousPublishedValue = new ValueArray<string>();
        var evolution = 0D;
        if(this.SubscribedParameterValueSetBase.Revisions.Count != 0 && this.ParameterOrOverride.Scale is not null)
        {
            var previousValueSet = (ParameterValueSetBase)this.SubscribedParameterValueSetBase.Revisions.Last().Value;
            previousPublishedValue = previousValueSet.Published;
            if(this.checkIfEvolutionCanBeCalculated(this.SubscribedParameterValueSetBase.Published, previousPublishedValue) 
                && !previousPublishedValue.First().Equals("0"))
            {
                evolution = Math.Round(((double.Parse(this.SubscribedParameterValueSetBase.Published.First()) - double.Parse(previousPublishedValue.First())) / double.Parse(previousPublishedValue.First())) * 100);
            }
        } 
        <BSTD Class="width-20">
            <div class="row m-0">
                <div class="col p-0 align-self-center">
                    @if (this.isUpdated == true)
                    {
                        <span class="badge rounded-pill bg-dark font-weight-100 font-size-bs-body">
                            <ScalarParameter 
                                Value="@SubscribedParameterValueSetBase.Published.First()" 
                                Scale="@ParameterOrOverride.Scale?.ShortName" 
                                ValueType="@ParameterOrOverride.ParameterType.GetType()" />
                        </span>
                    } else
                    {
                        <ScalarParameter 
                            Value="@SubscribedParameterValueSetBase.Published.First()" 
                            Scale="@ParameterOrOverride.Scale?.ShortName" 
                            ValueType="@ParameterOrOverride.ParameterType.GetType()" />
                    }
                </div>
                @if(this.ParameterOrOverride.Scale is not null && this.checkIfParameterRevisionsExist(this.SubscribedParameterValueSetBase)
                    && this.checkIfEvolutionCanBeCalculated(this.SubscribedParameterValueSetBase.Published, previousPublishedValue))
                {
                    <div class="col-4 p-0">
                        @if(this.checkIfLastActualValueIsHigherThanActualValue(this.SubscribedParameterValueSetBase.Published.First(), previousPublishedValue.First()))
                        {
                            <i class="oi oi-caret-bottom m-left-5px"></i>
                            <div class="m-left-5px font-size-small"> (@evolution %) </div>

                        } else if (this.checkIfLastActualValueIsLowerThanActualValue(this.SubscribedParameterValueSetBase.Published.First(), previousPublishedValue.First()))
                        {
                            <i class="oi oi-caret-top m-left-5px"></i>
                            <div class="m-left-5px font-size-small"> (+@evolution %) </div>
                        }
                    </div>
                }
            </div>
        </BSTD>
    } else if(this.ParameterOrOverride.ParameterType.GetType().Equals(typeof(ArrayParameterType)))
    {
        <BSTD Class="width-20">
            @if (this.isUpdated == true)
            {
                <div class="bg-dark font-weight-100 font-size-bs-body" style="color: white; border-radius: 10px;">
                    <ArrayParameter 
                        ArrayParameterType="(ArrayParameterType)this.ParameterOrOverride.ParameterType" 
                        Values="@SubscribedParameterValueSetBase.Published" />
                </div>
            } else
            {
                <ArrayParameter 
                    ArrayParameterType="(ArrayParameterType)this.ParameterOrOverride.ParameterType" 
                    Values="@SubscribedParameterValueSetBase.Published" />
            }
        </BSTD>
    } else
    {
        var compoundParameterType = (CompoundParameterType)this.ParameterOrOverride.ParameterType;
        var components = compoundParameterType?.Component.ToList();
        if (components != null && compoundParameterType != null)
        {
            <BSTD Class="width-20">
                @if (this.isUpdated == true)
                {
                    <div class="bg-dark font-weight-100 font-size-bs-body" style="color: white; border-radius: 10px;">
                        <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                            @foreach (var component in components)
                            {
                                var indexStart = 0;
                                for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                {
                                    indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                }
                                <CompoundParameter 
                                    IndexStartInParameterTypeComponent="indexStart" 
                                    Values="@SubscribedParameterValueSetBase.Published" 
                                    Component="component" />
                            }
                        </div>   
                    </div>
                } else
                {
                    <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                        @foreach (var component in components)
                        {
                            var indexStart = 0;
                            for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                            {
                                indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                            }
                            <CompoundParameter 
                                IndexStartInParameterTypeComponent="indexStart" 
                                Values="@SubscribedParameterValueSetBase.Published" 
                                Component="component" />
                        }
                    </div> 
                }
            </BSTD>
        }
    }
    <BSTD Class="width-10">
        @ParameterOrOverride.Owner.ShortName
    </BSTD>
    <BSTD Class="width-20">
        <div class="row m-0">
            <div class="col p-0">
                @if(checkIfParameterRevisionsExist(this.SubscribedParameterValueSetBase))
                {
                    var previousValueSet = (ParameterValueSetBase)this.SubscribedParameterValueSetBase.Revisions.Last().Value;
                    <div class="font-size-small">
                        @if(this.ParameterOrOverride.ParameterType.NumberOfValues == 1)
                        {
                            <ScalarParameter 
                                Value="@previousValueSet.Published.First()" 
                                Scale="@ParameterOrOverride.Scale?.ShortName" 
                                ValueType="@ParameterOrOverride.ParameterType.GetType()" />
                        } else if(this.ParameterOrOverride.ParameterType.GetType().Equals(typeof(ArrayParameterType)))
                        {
                            <ArrayParameter 
                                ArrayParameterType="(ArrayParameterType)this.ParameterOrOverride.ParameterType" 
                                Values="@previousValueSet.Published" />
                        } else
                        {
                            var compoundParameterType = (CompoundParameterType)this.ParameterOrOverride.ParameterType;
                            var components = compoundParameterType?.Component.ToList();
                            if (components != null && compoundParameterType != null)
                            {
                                <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                    @foreach (var component in components)
                                    {
                                        var indexStart = 0;
                                        for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                        {
                                            indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                        }
                                        <CompoundParameter 
                                            IndexStartInParameterTypeComponent="indexStart" 
                                            Values="@previousValueSet.Published" 
                                            Component="component" />
                                    }
                                </div>
                            }
                        }
                    </div>
                } else
                {
                    <div>-</div>
                }
            </div>
        </div>
        @if(this.ParameterOrOverride.Scale is not null && this.checkIfParameterRevisionsExist(this.SubscribedParameterValueSetBase))
        {
            <div class="row">
                <a @onclick="@(() => AccessData(this.SubscribedParameterValueSetBase.Iid))" class="m-left-3px">More</a>
            </div>
        }
    </BSTD>

}

@code {
    /// <summary>
    /// The ParameterSubscriptionValueSet to show in the table
    /// </summary>
    [Parameter]
    public ParameterSubscriptionValueSet? ParameterSubscriptionValueSet { get; set; }

    /// <summary>
    /// The associated ParameterSubscription to show
    /// </summary>
    [Parameter]
    public ParameterSubscription? ParameterSubscription { get; set; }

    /// <summary>
    /// The subscribed ParamterOrOverrideBase
    /// </summary>
    [Parameter]
    public ParameterOrOverrideBase? ParameterOrOverride { get; set; }

    /// <summary>
    /// The subscribed ParameterValueSetBase
    /// </summary>
    [Parameter]
    public ParameterValueSetBase? SubscribedParameterValueSetBase { get; set; }

    /// <summary>
    /// ParameterSwitchKind to show
    /// </summary>
    private string? selectedSwitchKind { get; set; }

    /// <summary>
    /// Sets if ParameterValueSet was edited
    /// </summary>
    private bool? isParameterSubscriptionValueSetEdited { get; set; }

    /// <summary>
    /// Sets if ParameterValueSet was edited
    /// </summary>
    private bool? isUpdated { get; set; }

    /// <summary>
    /// Listeners for the components to update it with edit changes
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize ClonedParameterValueSet 
    /// </summary>
    protected override void OnInitialized()
    {
        if (this.ParameterSubscriptionValueSet != null)
        {
            this.isParameterSubscriptionValueSetEdited = this.IterationService.NewUpdates.Contains(this.ParameterSubscriptionValueSet.Iid);
        }

        if (!this.listeners.TryGetValue("NewEdit", out var listener)) {
            this.listeners.Add("NewEdit", CDPMessageBus.Current.Listen<NewUpdateEvent>().Where(x => x.UpdatedThingIid == this.ParameterSubscriptionValueSet?.Iid).Subscribe(x =>
            {
                this.isParameterSubscriptionValueSetEdited = true;
                this.StateHasChanged();
            }));
        }

        if (!this.listeners.TryGetValue("SwitchMode", out listener)) {
            this.listeners.Add("SwitchMode", CDPMessageBus.Current.Listen<SwitchEvent>().Where(x => x.ParameterValuSetIid == this.ParameterSubscriptionValueSet?.Iid).Subscribe(x =>
            {
                if (x.SubmitChange == null)
                {
                    this.selectedSwitchKind = x.SelectedSwitch.ToString();
                    this.StateHasChanged();
                } else if (x.SubmitChange == true) {
                    this.UpdateChange(x.SelectedSwitch);
                }
            }));
        }

        if (!this.listeners.TryGetValue("UpToDate", out  listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.isUpdated = this.isParameterSubscriptionValueSetUpdated();
                this.StateHasChanged();
            }));
        }

        if (!this.listeners.TryGetValue("UpdateValidated", out listener)) {
            this.listeners.Add("UpdateValidated", CDPMessageBus.Current.Listen<ValidateUpdate>().Where(x => x.Iid == this.ParameterSubscriptionValueSet?.Iid).Subscribe(x =>
            {
                this.isUpdated = this.isParameterSubscriptionValueSetUpdated();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Update value of <see cref="ParameterSubscriptionValueSet"> when a change appears 
    /// </summary>
    private void UpdateChange(ParameterSwitchKind newValue)
    {
        if (this.ParameterSubscriptionValueSet != null)
        {
            if(!this.IterationService.NewUpdates.Contains(this.ParameterSubscriptionValueSet.Iid))
            {
                this.IterationService.NewUpdates.Add(this.ParameterSubscriptionValueSet.Iid);
                CDPMessageBus.Current.SendMessage<NewUpdateEvent>(new NewUpdateEvent(this.ParameterSubscriptionValueSet.Iid));
            }
            var clonedParameterValueSet = this.ParameterSubscriptionValueSet.Clone(false);
            clonedParameterValueSet.ValueSwitch = newValue;
            this.SessionService.UpdateThings(new List<Thing>()
            {
                clonedParameterValueSet
            });
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Tells if the subscribed ParameterValueSetBase is updated
    /// </summary>
    private bool isSubscribedParameterValueSetBaseUpdated()
    {
        var isUpdated = false;
        if(this.SubscribedParameterValueSetBase?.Revisions.LongCount() != (long)0 
            && this.SubscribedParameterValueSetBase?.RevisionNumber != this.SubscribedParameterValueSetBase?.Revisions.Last().Value.RevisionNumber)
        {
            isUpdated = true;
        }

        if (this.isUpdateAlreadyValidated())
        {
            isUpdated = false;
        }

        return isUpdated;
    }

    /// <summary>
    /// Tells if the ParameterSubscriptionValueSet is updated
    /// </summary>
    private bool isParameterSubscriptionValueSetUpdated()
    {
        bool isUpdated = false;
        if(this.isSubscribedParameterValueSetBaseUpdated() && this.ParameterSubscriptionValueSet?.ValueSwitch == ParameterSwitchKind.COMPUTED)
        {
            isUpdated = true;
        }

        if (this.isUpdateAlreadyValidated())
        {
            isUpdated = false;
        }
        return isUpdated;
    }

    /// <summary>
    /// Tells if the update is already validated in the table
    /// </summary>
    private bool isUpdateAlreadyValidated()
    {
        var isValidated = false;
        if (this.SessionService.CurrentDomainOfExpertise != null && this.IterationService.ValidatedUpdates.TryGetValue(this.SessionService.CurrentDomainOfExpertise, out var list))
        {
            var existingValidatedParameter = list.Find(p => p.Iid == this.ParameterSubscriptionValueSet?.Iid);
            if(existingValidatedParameter != null && this.ParameterSubscriptionValueSet?.RevisionNumber == existingValidatedParameter.RevisionNumber && this.ParameterSubscriptionValueSet?.ValueSwitch != ParameterSwitchKind.COMPUTED)
            {
                isValidated = true;
            }
            if(existingValidatedParameter != null && this.SubscribedParameterValueSetBase?.RevisionNumber == existingValidatedParameter.SubscribedRevisionNumber)
            {
                isValidated = true;
            }
        }
        return isValidated;
    }

    /// <summary>
    /// Checks if pourcentage of evolution of actualValue can be calculated
    /// </summary>
    /// <param name="actualValue"></param>
    /// <param name="lastActualValue"></param>
    private bool checkIfEvolutionCanBeCalculated(ValueArray<string>? actualValue, ValueArray<string>? lastActualValue)
    {
        return actualValue?.Count == 1
            && lastActualValue?.Count == 1
            && !actualValue.First().Equals("-")
            && !lastActualValue.First().Equals("-");
    }

    /// <summary>
    /// Checks if the previous value is higher than the actual value
    /// </summary>
    /// <param name="actualValue"></param>
    /// <param name="lastActualValue"></param>
    private bool checkIfLastActualValueIsHigherThanActualValue(string actualValue, string lastActualValue)
    {
        return double.Parse(lastActualValue) > double.Parse(actualValue);
    }

    /// <summary>
    /// Checks if the previous value is lower than the actual value
    /// </summary>
    /// <param name="actualValue"></param>
    /// <param name="lastActualValue"></param>
    private bool checkIfLastActualValueIsLowerThanActualValue(string actualValue, string lastActualValue)
    {
        return double.Parse(lastActualValue) < double.Parse(actualValue);
    }

    /// <summary>
    /// Checks if the <see cref="ParameterValueSet"> has Revisions
    /// </summary>
    /// <param name="associatedParameterValueSet"></param>
    private bool checkIfParameterRevisionsExist(ParameterValueSetBase? parameterValueSet)
    {
        return parameterValueSet != null 
            && parameterValueSet.Revisions.Count != 0;
    }

    /// <summary>
    /// Access to historic graph for selected parameterSubscriptionValueSet and parameterValueSet
    /// </summary>
    /// <param name="parameterValueSetIid">Guid of the selected parameterSubscriptionValueSet</param>
    public void AccessData(Guid? parameterValueSetIid)
    {
        this.NavigationManager.NavigateTo($"/SubscriptionDashboard/More?parameterValueSetIid={parameterValueSetIid?.ToString().ToShortGuid()}");
    }
}
