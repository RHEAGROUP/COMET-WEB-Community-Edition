<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.EngineeringModelData
@using CDP4Dal
@using CDP4Dal.Events
@using COMETwebapp.IterationServices
@using COMETwebapp.Model
@using COMETwebapp.Services.SessionManagement
@using COMETwebapp.SessionManagement

@inject ISessionService SessionService
@inject IIterationService IterationService
@inject NavigationManager NavigationManager

@implements IDisposable

<div>
    @if (this.Elements.Count == 0)
    {
        <div>
            You don't have any subscriptions.
        </div>
    } else
    {
        <div class="container-fluid" style="min-width: 1400px; max-width: 1400px;">
            <div class="container-fluid m-2">
                <div class="row">
                    <div class="col">
                        <h6 style="color: black">Filter on Element Usage Name:</h6>
                        <div class="width-fit-content">
                            <DxComboBox Data="@Filter(Elements.OrderBy(e => e.Name).ToList())"
                                TextFieldName="@nameof(ElementBase.Name)"
                                AllowUserInput="true"
                                NullText="--Select an Element--"
                                Value="this.selectedElement"
                                ValueChanged="@((ElementBase element) => this.selectedElement = element)"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                FilteringMode="DataGridFilteringMode.Contains"/>
                        </div>
                    </div>
                    <div class="col">
                        <h6 style="color: black">Filter on Parameter Type:</h6>
                        <div class="width-fit-content">
                            <DxComboBox Data="@ParameterTypeNames"
                                AllowUserInput="true"
                                NullText="--Select--"
                                Value="this.parameterTypeSelected"
                                ValueChanged="@((string parameterTypeName) => this.OnParameterFilterChange(parameterTypeName))"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                FilteringMode="DataGridFilteringMode.Contains"/>
                        </div>
                    </div>  
                    @{
                        var iteration = this.SessionService.DefaultIteration;
                    }
                    @if (iteration != null && iteration.Option.ToList().Count > 1)
                    {
                        var optionNames = iteration.Option.Select(o => o.Name).OrderBy(o => o).ToList();
                        <div class="col">
                            <h6 style="color: black">Filter on Option:</h6>
                            <div class="width-fit-content">
                                <DxComboBox Data="@optionNames"
                                    AllowUserInput="true"
                                    Value="this.OptionSelected"
                                    ValueChanged="@((string option) => OnOptionFilterChange(option))"
                                    FilteringMode="DataGridFilteringMode.Contains"/>
                            </div>
                        </div>
                    }
                    <div class="col align-self-end">
                        <div>
                            <input type="checkbox" id="filterUpdates" @onchange="@OnFilterUpdates" >
                            <label class="m-left-3px color-7b8a8b" for="filterUpdates">Filter only changes</label>
                        </div>
                    </div>
                    <div class="col align-self-center">
                        <button class="btn btn-outline-dark width-200 padding-bottom-1 padding-top-1" @onclick="() => ValidateAllChanges()">
                            <i class="oi oi-check m-right-3px"></i>
                            Validate all changes
                        </button>
                    </div>
                </div>
            </div>
            <BSTable IsBordered="false" IsStriped="true" Class="text-align-center">
                <BSTHead>
                    <BSTR>
                        <BSTD>
                            <div class="row">
                                <div style="width: 10%;">Element</div>
                                <div style="width: 11%;">Parameter</div>
                                <div style="width: 10%;">Model Code</div>
                                <div style="width: 20%;">Parameter Subscription Value</div>
                                <div style="width: 18%;">Parameter Value</div>
                                <div style="width: 11%;">Owner</div>
                                <div style="width: 18%">History</div>
                            </div>
                        </BSTD>
                    </BSTR>
                </BSTHead>
                <BSTBody>
                    <div style="max-height:600px;overflow-y:scroll">
                        @foreach(var element in this.Filter(this.Elements.OrderBy(e => e.Name).ToList()))
                        {
                            <div style="padding-right: 0px; border-bottom-color: black; border-bottom-style: double;">
                                <BSTR AlignRow="AlignRow.Middle">
                                    <BSTD Class="width-10">@element.Name</BSTD>
                                    <BSTD Class="width-1400">
                                        <BSTable IsBordered="false" IsStriped="true" Class="text-align-center margin-bottom-0">
                                            <BSTBody>
                                                @foreach (var parameterSubscription in this.FilterParameter(this.IterationService.GetParameterSubscriptionsByElement(element, this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration))))
                                                {
                                                    var associatedParameter = (ParameterOrOverrideBase)parameterSubscription.Container;
                                                    @foreach(var parameterSubscriptionValueSet in this.FilterParameterSubscriptionValueSet(parameterSubscription.IsOptionDependent, parameterSubscription.ValueSet))
                                                    {
                                                        var subscribedParameterValueSet = parameterSubscriptionValueSet.SubscribedValueSet;
                                                        <BSTR AlignRow="AlignRow.Middle" @onclick="() => UpdateValidation(parameterSubscriptionValueSet)">
                                                            <ParameterSubscriptionValueSetRow 
                                                                ParameterSubscription = "@parameterSubscription"
                                                                ParameterSubscriptionValueSet = "@parameterSubscriptionValueSet"
                                                                ParameterOrOverride = "@associatedParameter"
                                                                SubscribedParameterValueSetBase = "@subscribedParameterValueSet" />
                                                        </BSTR>
                                                    }
                                                }
                                            </BSTBody>
                                        </BSTable>
                                    </BSTD>
                                </BSTR>
                            </div>
                        }
                    </div>
                </BSTBody>
            </BSTable>
        </div>
    }
</div>

@code {
    /// <summary>
    /// List of <see cref="ElementBase"> containing at least one subscribed <see cref="ParameterOrOverrideBase">
    /// </summary>
    public List<ElementBase> Elements { get; set; } = new List<ElementBase>();

    /// <summary>
    /// Name of the option selected
    /// </summary>
    [Parameter]
    public string? OptionSelected { get; set; }

    /// <summary>
    /// The selected <see cref="ElementBase"> to filter
    /// </summary>
    private ElementBase? selectedElement { get; set; }

    /// <summary>
    /// Name of the parameter type selected
    /// </summary>
    private string? parameterTypeSelected { get; set; }

    private bool? isOnlyUpdates { get; set; }

    /// <summary>
    /// All ParameterType names in the model
    /// </summary>
    public List<string> ParameterTypeNames = new List<string>();

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();


    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.LoadElements();
        this.ParameterTypeNames.Clear();
        this.IterationService.GetParameterTypes(this.SessionService.DefaultIteration).OrderBy(p => p.Name).ToList().ForEach(p => this.ParameterTypeNames.Add(p.Name));

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.LoadElements();
                this.StateHasChanged();
            }));
        }
        if (!this.listeners.TryGetValue("DomainChangedEvent", out listener)) {
            this.listeners.Add("DomainChangedEvent", CDPMessageBus.Current.Listen<DomainChangedEvent>().Subscribe(x =>
            {
                this.LoadElements();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    private List<ParameterSubscription> FilterParameter(List<ParameterSubscription> parameterSubscriptions)
    {
        if(this.parameterTypeSelected != null)
        {
            parameterSubscriptions.RemoveAll(p => p.ParameterType.Name != this.parameterTypeSelected);
        }
        return parameterSubscriptions;
    }
    /// <summary>
    /// Load all data to create the table
    /// </summary>
    private void LoadElements()
    {
        this.Elements.Clear();
        var iteration = this.SessionService.DefaultIteration;
        if (iteration != null)
        {
            if (iteration.TopElement != null)
            {
                var parameterSubscriptions = this.IterationService.GetParameterSubscriptionsByElement(iteration.TopElement, this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration));
                if (parameterSubscriptions?.Count != 0)
                {
                    this.Elements.Add(iteration.TopElement);
                }
            }

            this.Elements.AddRange(iteration.Element.SelectMany(e => e.ContainedElement)
                .Where(e => this.IterationService.GetParameterSubscriptionsByElement(e, this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)).Count != 0));
        }
    }

    /// <summary>
    /// Filter <see cref="ElementBase"> to show in the tree
    /// </summary>
    /// <param name="elements"></param>
    /// <returns></returns>
    public List<ElementBase> Filter(List<ElementBase> elements)
    {
        if(this.OptionSelected != null)
        {
            var option = this.SessionService.DefaultIteration?.Option.ToList().Find(option => option.Name == this.OptionSelected)?.Iid;
            var nestedElements = this.IterationService.GetNestedElementsByOption(this.SessionService.DefaultIteration, option);

            var associatedElements = new List<ElementUsage>();
            nestedElements.ForEach(element =>
            {
                associatedElements.AddRange(element.ElementUsage);
            });
            associatedElements = associatedElements.Distinct().ToList();

            var elementsToRemove = new List<ElementBase>();
            elements.ForEach(e =>
            {
                if (e.GetType().Equals(typeof(ElementUsage)) && !associatedElements.Contains(e))
                {
                    elementsToRemove.Add(e);
                }
            });
            elements.RemoveAll(e => elementsToRemove.Contains(e));
        }

        if(this.parameterTypeSelected != null)
        {
            var elementsToRemove = new List<ElementBase>();
            elements.ForEach(e =>
            {
                if (e.GetType().Equals(typeof(ElementDefinition)))
                {
                    var elementDefinition = (ElementDefinition)e;
                    if(elementDefinition.Parameter.SelectMany(p => p.ParameterSubscription).Where(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count() == 0)
                    {
                        elementsToRemove.Add(e);
                    }
                } else if (e.GetType().Equals(typeof(ElementUsage)))
                {
                    var elementUsage = (ElementUsage)e;
                    if (elementUsage.ParameterOverride.Count == 0 && elementUsage.ElementDefinition.Parameter.SelectMany(p => p.ParameterSubscription).Where(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count() == 0)
                    {
                        elementsToRemove.Add(e);
                    }
                    else if (elementUsage.ParameterOverride.Count != 0)
                    {
                        if (elementUsage.ParameterOverride.SelectMany(p => p.ParameterSubscription).Where(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count() == 0 &&
                            elementUsage.ElementDefinition.Parameter.SelectMany(p => p.ParameterSubscription).Where(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count() == 0)
                        {
                            elementsToRemove.Add(e);
                        }
                    }
                }
            });
            elements.RemoveAll(e => elementsToRemove.Contains(e));
        }

        if(this.isOnlyUpdates == true)
        {
            elements.RemoveAll(e => this.IterationService.GetParameterSubscriptionsByElement(e, this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration))
                .SelectMany(p => p.ValueSet).Where(p => this.isParameterSubscriptionValueSetUpdated(p)).Count() == 0);
        }

        if(this.selectedElement != null)
        {
            return elements.FindAll(e => e.Iid == this.selectedElement?.Iid);
        } else
        {
            return elements;
        }
    }

    /// <summary>
    /// Updates Elements list when a filter for option is selected
    /// </summary>
    /// <param name="e">Name of the Option selected</param>
    public void OnOptionFilterChange(string option)
    {
        this.OptionSelected = option;
        var iid = this.SessionService.DefaultIteration?.Option.SingleOrDefault(o => o.Name.Equals(this.OptionSelected))?.Iid;
        this.NavigationManager.NavigateTo($"/SubscriptionDashboard/?filteroption={iid}");
    }

    /// <summary>
    /// Updates Elements list when a filter for parameter type is selected
    /// </summary>
    /// <param name="e">Name of the ParameterType selected</param>
    public void OnParameterFilterChange(string? parameterType)
    {
        this.parameterTypeSelected = parameterType;
        this.StateHasChanged();
    }

    /// <summary>
    /// Filters <see cref="ParameterSubscriptionValueSet">s for the selected option and the selected state
    /// </summary>
    /// <param name="parameterSubscriptionValueSets"><see cref="ParameterSubscriptionValueSet">s to filter</param>
    public List<ParameterSubscriptionValueSet> FilterParameterSubscriptionValueSet(bool isOptionDependent, List<ParameterSubscriptionValueSet> parameterSubscriptionValueSets)
    {
        var filteredParameterSubscriptionValueSets = new List<ParameterSubscriptionValueSet>();
        if(this.OptionSelected != null && isOptionDependent)
        {
            filteredParameterSubscriptionValueSets.AddRange(parameterSubscriptionValueSets.FindAll(p => p.ActualOption.Name.Equals(this.OptionSelected)));
        } else
        {
            filteredParameterSubscriptionValueSets.AddRange(parameterSubscriptionValueSets);
        }

        if(this.isOnlyUpdates == true)
        {
            return filteredParameterSubscriptionValueSets.Where(p => this.isParameterSubscriptionValueSetUpdated(p)).OrderBy(p => p.ModelCode()).ToList();
        } else
        {
            return filteredParameterSubscriptionValueSets.OrderBy(p => p.ModelCode()).ToList();
        }   
    }

    /// <summary>
    /// Validates all changes highlights in the table
    /// </summary>
    private void ValidateAllChanges()
    {
        this.Filter(this.Elements).ToList().ForEach(e =>
        {
            var parameterSubscriptions = this.IterationService.GetParameterSubscriptionsByElement(e, this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration));
            parameterSubscriptions.ForEach(p =>
            {
                this.FilterParameterSubscriptionValueSet(p.IsOptionDependent, p.ValueSet).ForEach(v =>
                {
                    UpdateValidation(v);
                });
            });
        });
        CDPMessageBus.Current.SendMessage<SessionStateKind>(SessionStateKind.UpdatesAreValidated);
    }

    /// <summary>
    /// Save validation to not highlight changes a second time
    /// </summary>
    /// <param name="parameterSubscriptionValueSet">The <see cref="ParameterSubscriptionValueSet"> change to save </param>
    private void UpdateValidation(ParameterSubscriptionValueSet parameterSubscriptionValueSet)
    {
        if(this.SessionService.DefaultIteration != null && this.IterationService.ValidatedUpdates.TryGetValue(this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration), out var list))
        {
            var previousVersion = this.IterationService.ValidatedUpdates[this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)].Find(element => element.Iid == parameterSubscriptionValueSet.Iid);
            if(previousVersion != null)
            {
                previousVersion.RevisionNumber = parameterSubscriptionValueSet.RevisionNumber;
                previousVersion.SubscribedRevisionNumber = parameterSubscriptionValueSet.SubscribedValueSet.RevisionNumber;

            } else
            {
                this.IterationService.ValidatedUpdates[this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)].Add(new ParameterSubscriptionViewModel()
                {
                    Iid = parameterSubscriptionValueSet.Iid,
                    RevisionNumber = parameterSubscriptionValueSet.RevisionNumber,
                    SubscribedRevisionNumber = parameterSubscriptionValueSet.SubscribedValueSet.RevisionNumber
                });
            }
        } else if (this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration) != null)
        {
            this.IterationService.ValidatedUpdates.Add(this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration), new List<ParameterSubscriptionViewModel>()
            {
                new ParameterSubscriptionViewModel()
                {
                    Iid = parameterSubscriptionValueSet.Iid,
                    RevisionNumber = parameterSubscriptionValueSet.RevisionNumber,
                    SubscribedRevisionNumber = parameterSubscriptionValueSet.SubscribedValueSet.RevisionNumber
                }
            });
        }
        CDPMessageBus.Current.SendMessage<ValidateUpdate>(new ValidateUpdate(parameterSubscriptionValueSet.Iid));
    }

    /// <summary>
    /// Enable/disable filter changes in the table
    /// </summary>
    /// <param name="e">The <see cref="ChangeEventArgs"> from the checkbox input</param>
    public void OnFilterUpdates(ChangeEventArgs e)
    {
        var value = e.Value;
        if(value != null)
        {
            this.isOnlyUpdates = (bool) value;
        }
        this.Elements.Clear();
        this.LoadElements();
    }

    private bool isSubscribedParameterValueSetBaseUpdated(ParameterSubscriptionValueSet parameterSubscriptionValueSet)
    {
        var isUpdated = false;
        if(parameterSubscriptionValueSet.SubscribedValueSet.Revisions.LongCount() != (long)0 
            && parameterSubscriptionValueSet.SubscribedValueSet.RevisionNumber != parameterSubscriptionValueSet.SubscribedValueSet.Revisions.Last().Value.RevisionNumber)
        {
            isUpdated = true;
        }

        if (this.isUpdateAlreadyValidated(parameterSubscriptionValueSet))
        {
            isUpdated = false;
        }

        return isUpdated;
    }

    private bool isParameterSubscriptionValueSetUpdated(ParameterSubscriptionValueSet parameterSubscriptionValueSet)
    {
        bool isUpdated = false;
        if(this.isSubscribedParameterValueSetBaseUpdated(parameterSubscriptionValueSet) && parameterSubscriptionValueSet.ValueSwitch == ParameterSwitchKind.COMPUTED)
        {
            isUpdated = true;
        }

        if (this.isUpdateAlreadyValidated(parameterSubscriptionValueSet))
        {
            isUpdated = false;
        }

        return isUpdated;
    }

    private bool isUpdateAlreadyValidated(ParameterSubscriptionValueSet parameterSubscriptionValueSet)
    {
        var isValidated = false;
        if(this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration) != null && this.IterationService.ValidatedUpdates.TryGetValue(this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration), out var list))
        {
            var existingValidatedParameter = list.Find(p => p.Iid == parameterSubscriptionValueSet.Iid);
            if(existingValidatedParameter != null && parameterSubscriptionValueSet.RevisionNumber == existingValidatedParameter.RevisionNumber && parameterSubscriptionValueSet.ValueSwitch != ParameterSwitchKind.COMPUTED)
            {
                isValidated = true;
            }
            if(existingValidatedParameter != null && parameterSubscriptionValueSet.SubscribedValueSet.RevisionNumber == existingValidatedParameter.SubscribedRevisionNumber)
            {
                isValidated = true;
            }
        }
        return isValidated;
    }
}
