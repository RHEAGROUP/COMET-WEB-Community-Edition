<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor
@inject IIterationService iterationService
@implements IDisposable

<div class="display-flex flex-column">
    @if (this.SubscribedParameters.Count == 0)
    {
        <div>
            You don't have any subscriptions.
        </div>
    } else {
        @if (ViewModelSubscribedParameters.ToList().Exists(parameter => parameter.IsUpdated || parameter.IsSubscribedUpdated))
        {
            <div class="display-flex flex-column align-items-end">
                <button class="btn btn-outline-dark width-200 padding-bottom-1 padding-top-1" @onclick="() => ValidateAllChanges()">
                    <i class="oi oi-check m-right-3px"></i>
                    Validate all changes
                </button>
            </div>
        }
        <div>
            <DxDataGrid @ref="@grid" Data="@ViewModelSubscribedParameters" PageSize="0" RowClick="@OnRowClick">
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.ElementName)" Caption="Element" TextAlignment="DataGridTextAlign.Center" SortOrder="DataGridColumnSortOrder.Ascending" />
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.ParameterType)" Caption="Parameter" TextAlignment="DataGridTextAlign.Center" />
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.ModelCode)" Caption="Model code" TextAlignment="DataGridTextAlign.Center" />
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.ActualValue)" Caption="Actual Value from ParameterSubscription"TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var actualValue = (context as ParameterSubscriptionViewModel)?.ActualValue;
                            var scalevalue = (context as ParameterSubscriptionViewModel)?.Scale;
                            var switchmode = (context as ParameterSubscriptionViewModel)?.SwitchMode;
                        }
                        @if ((context as ParameterSubscriptionViewModel)?.IsUpdated == true && actualValue != null)
                        {
                            <span class="badge rounded-pill bg-dark">
                                @if (actualValue.Count == 1)
                                {
                                    <a>@actualValue.First() @scalevalue </a>
                                }
                                else
                                {
                                    @foreach(string value in actualValue)
                                    {
                                        <a>value</a>
                                    }
                                    <a>@scalevalue </a>
                                }
                            </span>
                            <a><br/> (@switchmode)</a>
                        } else if (actualValue != null)
                        {
                            @if (actualValue.Count == 1)
                            {
                                <a>@actualValue.First() @scalevalue <br/> (@switchmode)</a>
                            }
                            else
                            {
                                @foreach(string value in actualValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/> (@switchmode)</a>
                            }
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.SubscribedActualValue)" Caption="Actual Value from Parameter" TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var actualValue = (context as ParameterSubscriptionViewModel)?.SubscribedActualValue;
                            var scalevalue = (context as ParameterSubscriptionViewModel)?.SubscribedScale;
                            var switchmode = (context as ParameterSubscriptionViewModel)?.SubscribedSwitchMode;
                        }
                        @if ((context as ParameterSubscriptionViewModel)?.IsSubscribedUpdated == true && actualValue != null)
                        {
                            <span class="badge rounded-pill bg-dark">
                                @if (actualValue.Count == 1)
                                {
                                    <a>@actualValue.First() @scalevalue </a>
                                } else
                                {
                                    @foreach(string value in actualValue)
                                    {
                                        <a>value</a>
                                    }
                                    <a>@scalevalue </a>
                                }
                            </span>
                            <a><br/> (@switchmode)</a>
                        } else if (actualValue != null)
                        {
                            @if (actualValue.Count == 1)
                            {
                                <a>@actualValue.First() @scalevalue <br/> (@switchmode)</a>
                            } else
                            {
                                @foreach(string value in actualValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/> (@switchmode)</a>
                            }
                        }
                </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.SubscribedOwner)" Caption="Owner"TextAlignment="DataGridTextAlign.Center"/>
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.Option)" TextAlignment="DataGridTextAlign.Center"/>
                <DxDataGridColumn Field="@nameof(ParameterSubscriptionViewModel.State)" TextAlignment="DataGridTextAlign.Center"/>
            </DxDataGrid>
        </div>
    }
</div>

@code {
    /// <summary>
    /// List of subscribed <see cref="Parameter"> by the current <see cref="DomainOfExpertise">
    /// </summary>
    public List<ParameterSubscription> SubscribedParameters { get; set; } = new List<ParameterSubscription>();

    /// <summary>
    /// Defines grid for the component to be able to define actions on it
    /// </summary>
    private DxDataGrid<ParameterSubscriptionViewModel>? grid;

    /// <summary>
    /// List of <see cref="ParameterSubscriptionViewModel"> to show in the table
    /// </summary>
    public ObservableCollection<ParameterSubscriptionViewModel> ViewModelSubscribedParameters = new ObservableCollection<ParameterSubscriptionViewModel>();

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.LoadData();

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.LoadData();
                this.StateHasChanged();
            }));
        }
        if (!this.listeners.TryGetValue("DomainChangedEvent", out listener)) {
            this.listeners.Add("DomainChangedEvent", CDPMessageBus.Current.Listen<DomainChangedEvent>().Subscribe(x =>
            {
                this.LoadData();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Load all data to create the table
    /// </summary>
    private void LoadData()
    {
        this.ViewModelSubscribedParameters.Clear();
        this.SubscribedParameters = iterationService.GetParameterSubscriptions(ISessionAnchor.GetIteration(), ISessionAnchor.CurrentDomainOfExpertise);
        this.GetViewModelSubscribedParameters();
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Initialize the list of <see cref="ParameterSubscriptionViewModel"> with subscribed <see cref="Parameter">
    /// </summary>
    public void GetViewModelSubscribedParameters()
    {
        this.SubscribedParameters.ForEach(subscribedparameter => {
            subscribedparameter.ValueSet.ForEach(parameterSubscriptionValueSet =>
            {
                var parameterSubscriptionValueSetRevisions = parameterSubscriptionValueSet.Revisions;
                var isParameterSubscriptionValueUpdated = false;

            //if change in manual or reference value, revisionNumber changes
                if (parameterSubscriptionValueSetRevisions?.LongCount() != (long)0 
                    && parameterSubscriptionValueSet?.RevisionNumber != parameterSubscriptionValueSetRevisions?.Last().Value.RevisionNumber)
                {
                    isParameterSubscriptionValueUpdated = true;
                }

                var paramererValueSets = iterationService.GetParameterValueSets(ISessionAnchor.GetIteration());

                var associatedParameterValueSet = paramererValueSets.Find(p => p.Iid == parameterSubscriptionValueSet?.SubscribedValueSet.Iid);
                var associatedElement = ISessionAnchor.GetIteration()?.Element.Find(element => element.Parameter.Find(p => p.ValueSet.Contains(associatedParameterValueSet)) != null);
                var associatedParameter = associatedElement?.Parameter.Find(p => p.ValueSet.Contains(associatedParameterValueSet));

                var associatedParameterValueSetRevisions = associatedParameterValueSet?.Revisions;
                var isAssociatedParameterValueUpdated = false;

            //if any change, revisionNumber changes
                if (associatedParameterValueSetRevisions?.LongCount() != (long)0 
                    && associatedParameterValueSet?.RevisionNumber != associatedParameterValueSetRevisions?.Last().Value.RevisionNumber)
                {
                    isAssociatedParameterValueUpdated = true;
                }

            //check if changes already validated
                if(ISessionAnchor.CurrentDomainOfExpertise != null && iterationService.ValidatedUpdates.TryGetValue(ISessionAnchor.CurrentDomainOfExpertise, out var list))
                {
                    var existingValidatedParameter = list.Find(element => element.Iid == parameterSubscriptionValueSet?.Iid);
                    if(existingValidatedParameter != null && parameterSubscriptionValueSet?.RevisionNumber == existingValidatedParameter.RevisionNumber)
                    {
                        isParameterSubscriptionValueUpdated = false;
                    }
                    if(existingValidatedParameter != null && associatedParameterValueSet?.RevisionNumber == existingValidatedParameter.SubscribedRevisionNumber)
                    {
                        isAssociatedParameterValueUpdated = false;
                    }
                }

                if(isAssociatedParameterValueUpdated && parameterSubscriptionValueSet?.ValueSwitch == ParameterSwitchKind.COMPUTED)
                {
                    isParameterSubscriptionValueUpdated = true;
                }

                ViewModelSubscribedParameters.Add(new ParameterSubscriptionViewModel()
                {
                    ElementName = associatedElement?.Name,
                    ParameterType = subscribedparameter?.ParameterType?.Name,
                    ModelCode = associatedParameter?.ModelCode(),
                    Iid = parameterSubscriptionValueSet?.Iid,
                    RevisionNumber = parameterSubscriptionValueSet?.RevisionNumber,
                    ActualValue = parameterSubscriptionValueSet?.ActualValue,
                    Scale = subscribedparameter?.Scale?.ShortName,
                    SwitchMode = parameterSubscriptionValueSet?.ValueSwitch.ToString(),
                    Option = parameterSubscriptionValueSet?.ActualOption?.Name,
                    State = parameterSubscriptionValueSet?.ActualState?.Name,
                    IsUpdated = isParameterSubscriptionValueUpdated,
                    SubscribedRevisionNumber = associatedParameterValueSet?.RevisionNumber,
                    SubscribedActualValue = associatedParameterValueSet?.ActualValue,
                    SubscribedScale = associatedParameter?.Scale.ShortName,
                    SubscribedSwitchMode = associatedParameterValueSet?.ValueSwitch.ToString(),
                    SubscribedOwner = associatedParameterValueSet?.Owner.ShortName,
                    IsSubscribedUpdated = isAssociatedParameterValueUpdated
                });
            });
        });
    }

    /// <summary>
    /// Validates all changes highlights in the table
    /// </summary>
    private void ValidateAllChanges()
    {
        this.ViewModelSubscribedParameters.ToList().ForEach(parameter =>
        {
            if (parameter.IsSubscribedUpdated || parameter.IsUpdated)
            {
                parameter.IsSubscribedUpdated = false;
                parameter.IsUpdated = false;
                this.UpdateValidation(parameter);
            }
        });
        this.StateHasChanged();
    }

    /// <summary>
    /// Save validation to not highlight changes a second time
    /// </summary>
    /// <param name="parameter">The <see cref="ParameterSubscriptionViewModel"> change to save </param>
    private void UpdateValidation(ParameterSubscriptionViewModel parameter)
    {
        if(ISessionAnchor.CurrentDomainOfExpertise != null && iterationService.ValidatedUpdates.TryGetValue(ISessionAnchor.CurrentDomainOfExpertise, out var list))
        {
            var previousVersion = iterationService.ValidatedUpdates[ISessionAnchor.CurrentDomainOfExpertise].Find(element => element.Iid == parameter.Iid);
            if(previousVersion != null)
            {
                previousVersion.RevisionNumber = parameter.RevisionNumber;
                previousVersion.SubscribedRevisionNumber = parameter.SubscribedRevisionNumber;

            } else
            {
                iterationService.ValidatedUpdates[ISessionAnchor.CurrentDomainOfExpertise].Add(new ParameterSubscriptionViewModel()
                {
                    Iid = parameter.Iid,
                    RevisionNumber = parameter.RevisionNumber,
                    SubscribedRevisionNumber = parameter.SubscribedRevisionNumber
                });
            }
        } else if (ISessionAnchor.CurrentDomainOfExpertise != null)
        {
            iterationService.ValidatedUpdates.Add(ISessionAnchor.CurrentDomainOfExpertise, new List<ParameterSubscriptionViewModel>()
            {
                new ParameterSubscriptionViewModel()
                {
                    Iid = parameter.Iid,
                    RevisionNumber = parameter.RevisionNumber,
                    SubscribedRevisionNumber = parameter.SubscribedRevisionNumber
                }
            });
        }

    }

    /// <summary>
    /// Unhighlights changes and deletes row selection when you click on the table
    /// </summary>
    /// <param name="args"><see cref="DataGridRowClickEventArgs"> from the table</param>
    private void OnRowClick(DataGridRowClickEventArgs<ParameterSubscriptionViewModel> args) {
        if(args.MouseEventArgs.Detail == 1 && (args.DataItem.IsUpdated || args.DataItem.IsSubscribedUpdated)) {
            args.DataItem.IsUpdated = false;
            args.DataItem.IsSubscribedUpdated = false;
            this.UpdateValidation(args.DataItem);
            this.StateHasChanged();
        }
        grid?.SetDataRowSelected(args.DataItem, false);
        args.Handled = true;
    }
}
