@using CDP4Common.CommonData
<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor

@if(this.Scale != null && this.Value != null)
{
    @if(this.IsEditionMode == true && (this.IsManualEditable == true || this.IsReferenceEditable == true))
    {
        <div class="col p-0">
            <BSInput InputSize="Size.Small" InputType="InputType.Text" Value="@Value" @onchange="@OnChangeValue"/>
            [@Scale]
        </div>
    } else
    {
        <div class="col p-0"> @Value [@Scale] </div>
    }  
}
else
{
    @if(this.IsEditionMode == true && (this.IsManualEditable == true || this.IsReferenceEditable == true))
    {
        <div class="col p-0">
            <BSInput InputSize="Size.Small" InputType="InputType.Text" Value="@Value" @onchange="@OnChangeValue"/>
        </div>
    } else
    {
        <div class="col p-0">@Value</div>
    }
}

@code {
    /// <summary>
    /// The value of the associated <see cref="ParameterValueSet">
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// The scale of the associated <see cref="ParameterValueSet">
    /// </summary>
    [Parameter]
    public string? Scale { get; set; }

    /// <summary>
    /// <see cref="ParameterValueSet"> to show
    /// </summary>
    [Parameter]
    public ParameterValueSetBase? ParameterValueSet { get; set; } 

    /// <summary>
    /// Index of the displayed value in <see cref="ParameterValueSet">
    /// </summary>
    [Parameter]
    public int IndexInValueSet { get; set; }

    /// <summary>
    /// Tells if the Manual Value can be editable by the user
    /// </summary>
    [Parameter]
    public bool? IsManualEditable { get; set; }

    /// <summary>
    /// Tells if the Reference Value can be editable by the user
    /// </summary>
    [Parameter]
    public bool? IsReferenceEditable { get; set; }

    /// <summary>
    /// Tells if the edition mode is activated
    /// </summary>
    [Parameter]
    public bool? IsEditionMode { get; set; }

    /// <summary>
    /// Update value of <see cref="ParameterValueSet"> when a change appears 
    /// </summary>
    /// <param name="e"><see cref="ChangeEventArgs"> from input</param>
    public void OnChangeValue(ChangeEventArgs e)
    {
        if (this.ParameterValueSet != null)
        {
            var clone = this.ParameterValueSet.Clone(false);
            if (this.IsManualEditable == true)
            {
                clone.Manual[this.IndexInValueSet] = e.Value?.ToString();
            }
            else if (this.IsReferenceEditable == true)
            {
                clone.Reference[this.IndexInValueSet] = e.Value?.ToString();
            }
            this.ISessionAnchor.UpdateThings(new List<Thing>()
            {
                clone
            });
        }
    }
}
