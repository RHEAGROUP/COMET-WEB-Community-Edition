<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@if(this.ArrayParameterType != null && this.Values != null)
{
    if(this.ArrayParameterType.Rank <= 2)
    {
        var dimension = this.ArrayParameterType.Dimension;
        var nbRows = dimension.First();
        var nbColumns = dimension.ElementAt(1);                                                          

        <div class="p-0">
            @for(int i = 0; i < nbRows; i++)
            {
                <div class="row m-0">
                    @for(int j = 0; j < nbColumns; j++)
                    {
                        var scale = this.ArrayParameterType.Component.ElementAt(i * nbRows + j).Scale?.ShortName;
                        var index = this.IndexStartInValueSet + i * nbRows + j;
                        var valueType = this.ArrayParameterType.Component.ElementAt(i * nbRows + j).ParameterType.GetType();
                        var enumerationValueDefinitions = new List<EnumerationValueDefinition>();
                        if(valueType != null && valueType.Equals(typeof(EnumerationParameterType)))
                        {
                            var parameterType = (EnumerationParameterType)this.ArrayParameterType.Component.ElementAt(i * nbRows + j).ParameterType;
                            enumerationValueDefinitions.AddRange(parameterType.ValueDefinition);
                        } else
                        {
                            enumerationValueDefinitions = null;
                        }
                        <ScalarParameter 
                            Value="@Values.ElementAt(i*nbRows + j)" 
                            Scale="@scale" 
                            ValueType="@valueType"
                            ParameterValueSet="@ParameterValueSet" 
                            ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet"
                            EnumerationValueDefinitions="@enumerationValueDefinitions"
                            IndexInValueSet="@index" 
                            IsManualEditable="@IsManualEditable" 
                            IsReferenceEditable="@IsReferenceEditable" 
                            IsParameterValueSetEdited="@IsParameterValueSetEdited" />
                    }
                </div>
            }
        </div>
    }
    else
    {
        var dimension = this.ArrayParameterType.Dimension;
        var nbRows = dimension.First();
        var nbColumns = dimension.ElementAt(1);
        var nbLayers = dimension.ElementAt(2);
        <div class="p-0">
            @for(int z = 1; z <= nbLayers; z++)
            {
                <div class="row m-0 justify-content-center">
                    z = @z:
                </div>
                @for(int i = 0; i < nbRows; i++)
                {
                    <div class="row m-0">
                        @for(int j = 0; j < nbColumns; j++)
                        {
                            var scale = this.ArrayParameterType.Component.ElementAt(i * nbRows + j).Scale?.ShortName;
                            var valueType = this.ArrayParameterType.Component.ElementAt(i * nbRows + j).ParameterType.GetType();
                            var enumerationValueDefinitions = new List<EnumerationValueDefinition>();
                            if(valueType != null && valueType.Equals(typeof(EnumerationParameterType)))
                            {
                                var parameterType = (EnumerationParameterType)this.ArrayParameterType.Component.ElementAt(i * nbRows + j).ParameterType;
                                enumerationValueDefinitions.AddRange(parameterType.ValueDefinition);
                            } else
                            {
                                enumerationValueDefinitions = null;
                            }
                            <ScalarParameter 
                                Value="@Values.ElementAt(i*nbRows + j)" 
                                Scale="@scale" 
                                ValueType="@valueType"
                                ParameterValueSet="@ParameterValueSet" 
                                ParameterSubscriptionValueSet="@ParameterSubscriptionValueSet"
                                EnumerationValueDefinitions="@enumerationValueDefinitions"
                                IndexInValueSet="@(i*nbRows + j)" 
                                IsManualEditable="@IsManualEditable" 
                                IsReferenceEditable="@IsReferenceEditable" 
                                IsParameterValueSetEdited="@IsParameterValueSetEdited"/>
                        }
                    </div>
                }
            }
        </div>
    }
}

@code {
    /// <summary>
    /// The <see cref="ArrayParameterType"> associates to the <see cref="ParameterValueSet">
    /// </summary>
    [Parameter]
    public ArrayParameterType? ArrayParameterType { get; set; }

    /// <summary>
    /// Values of the associated <see cref="ParameterValueSet">
    /// </summary>
    [Parameter]
    public ValueArray<string>? Values { get; set; }

    /// <summary>
    /// The ParameterValueSet to show in the table
    /// </summary>
    [Parameter]
    public ParameterValueSetBase? ParameterValueSet { get; set; }

    /// <summary>
    /// <see cref="ParameterSubscriptionValueSet"> to show
    /// </summary>
    [Parameter]
    public ParameterSubscriptionValueSet? ParameterSubscriptionValueSet { get; set; } 

    /// <summary>
    /// Tells if the Manual Value can be editable by the user
    /// </summary>
    [Parameter]
    public bool? IsManualEditable { get; set; }

    /// <summary>
    /// Tells if the Reference Value can be editable by the user
    /// </summary>
    [Parameter]
    public bool? IsReferenceEditable { get; set; }

    /// <summary>
    /// Index of the Array start in the associated <see cref="ParameterValueSet">
    /// </summary>
    [Parameter]
    public int IndexStartInValueSet { get; set; }

    /// <summary>
    /// Sets if ParameterValueSet was edited
    /// </summary>
    [Parameter]
    public bool? IsParameterValueSetEdited { get; set; }
}
