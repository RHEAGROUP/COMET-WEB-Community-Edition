<!------------------------------------------------------------------------------
    Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@inject ISessionAnchor ISessionAnchor
@implements IDisposable

<nav class="navbar header-navbar p-0">
    <button class="navbar-toggler bg-primary d-block" @onclick="OnToggleClick">
        <span class="navbar-toggler-icon"></span>
    </button>

    <a class="navbar-brand"><img src="images/COMET-Logo.png" title="COMET Community Edition" /></a>

    <div class="header">
        
        <div class="ml-3 font-weight-bold title pr-4">COMET Community Edition</div>

        <div class="px-4">
	        <AuthorizeView>
		        <Authorized>
			        @if(ISessionAnchor.GetIteration() is not null)
			        {
				        <select id="domnain" @onchange="OnSwitchDomain">
					        @foreach (var domain in ISessionAnchor.Session.QueryDomainOfExpertise(ISessionAnchor.GetIteration()).OrderBy(i => i.Name))
					        {
						        @if(domain == ISessionAnchor.CurrentDomainOfExpertise)
						        {
							        <option value="@domain.Name" selected>@domain.Name</option>
						        } else
						        {
							        <option value="@domain.Name">@domain.Name</option>
						        }
					        }
				        </select>
			        }
			        @if (IsRefreshing)
			        {
				        <button class="btn" disabled=true>Refreshing</button>
			        } else {
				        <button class="btn" @onclick="() => ISessionAnchor.RefreshSession()"> Refresh Session</button>
			        }
			        <a href="logout"  @onclick="@(() => this.loginPopupVisible = false)">Log out</a>
		        </Authorized>
		        <NotAuthorized>
			        <a href="" @onclick="@(() => this.loginPopupVisible = true)">Log in</a>
			        <DxPopup HeaderText="Login" @bind-Visible="@loginPopupVisible">
				        <Login />
			        </DxPopup>
		        </NotAuthorized>
	        </AuthorizeView>
	        <a href="https://github.com/RHEAGROUP/COMET-WEB-Community-Edition" target="_blank" class="m-left-3px">About</a>
        </div>
    </div>

</nav>

@code {

    /// <summary>
    /// Gets or sets a value indicating whether toggle is on or off
    /// </summary>
    [Parameter]
    public bool ToggleOn { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ToggleOnChanged { get; set; }

    /// <summary>
    /// Status for <see cref="ISession"/> refresh
    /// </summary>
    public bool IsRefreshing { get; set; } = false;

    /// <summary>
    /// Handles the 
    /// </summary>
    /// <returns></returns>
    async Task OnToggleClick() => await Toggle();

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Boolean to determine if the Popup Login is visible
    /// </summary>
    private bool loginPopupVisible = false;

    /// <summary>
    /// toggle the visibility of the side menu
    /// </summary>
    /// <param name="value"></param>
    /// <returns>
    /// an awaitable <see cref="Task"/>
    /// </returns>
    async Task Toggle(bool? value = null) {
        var newValue = value ?? !ToggleOn;
        if(ToggleOn != newValue) {
            ToggleOn = newValue;
            await ToggleOnChanged.InvokeAsync(ToggleOn);
        }
    }

    /// <summary>
    /// Update state of refresh button
    /// If ISession is refreshing, button is disabled
    /// </summary>
    protected override void OnAfterRender(bool firstRender)
    {
        if (!this.listeners.TryGetValue("Refreshing", out var listener))
        {
            this.listeners.Add("Refreshing", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.Refreshing).Subscribe(x =>
            {
                this.IsRefreshing = true;
                this.StateHasChanged();
            }));
        }
        if (!this.listeners.TryGetValue("UpToDate", out listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.IsRefreshing = false;
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Gets the selected <see cref="DomainOfExpertise"/> and switchs ISession active domain 
    /// </summary>
    /// <param name="e"><see cref="ChangeEventArgs"/> from selector</param>
    public void OnSwitchDomain(ChangeEventArgs e)
    {
        var selectedDomainOfExpertise = ISessionAnchor.Session.QueryDomainOfExpertise(ISessionAnchor.GetIteration()).ToList().Find(domain => domain.Name.Equals(e.Value));
        ISessionAnchor.SwitchDomain(selectedDomainOfExpertise);
    }
}
