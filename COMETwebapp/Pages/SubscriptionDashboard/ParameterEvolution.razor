<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@page "/SubscriptionDashboard/More"
@inject ISessionAnchor ISessionAnchor
@inject IIterationService IterationService
@implements IDisposable

<div class="display-flex flex-column justify-content-center">
    <div class="font-weight-bold">@ElementName - @ParameterName</div>
    <DxChart Data="@Data" CustomizeSeriesPoint="@PreparePointLabel">
        <DxChartLineSeries
            ArgumentField="@((RevisionHistory p) => p.RevisionNumber)"
            ValueField="@(p => p.ActualValue)"
            AggregationMethod="Enumerable.Sum">
            <DxChartSeriesLabel Position="RelativePosition.Outside">
                <DxChartSeriesLabelConnector Visible="true" Width="3" />
            </DxChartSeriesLabel>
        </DxChartLineSeries>
        <DxChartLegend Visible="false"/>
    </DxChart>
</div>

@code {
    /// <summary>
    /// The iid of the parameter to present in the graph
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ParameterIid { get; set; }

    /// <summary>
    /// Data showed in the graph
    /// </summary>
    public ObservableCollection<RevisionHistory> Data { get; set; } = new ObservableCollection<RevisionHistory>();

    /// <summary>
    /// Type of parameter represented in the graph
    /// </summary>
    public string? ParameterName { get; set; }

    /// <summary>
    /// Element which contains the parameter represented in the graph
    /// </summary>
    public string? ElementName { get; set; }

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Get selected parameter Iid on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        this.ParameterIid = ParameterIid ?? null;
    }

    /// <summary>
    /// Initialize data to show in the graph
    /// </summary>
    protected override void OnInitialized()
    {
        this.LoadData();
        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.Data.Clear();
                this.LoadData();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Create Data list with all previous values for the selected parameter
    /// </summary>
    public void LoadData()
    {
        var paramererValueSets = this.IterationService.GetParameterValueSets(this.ISessionAnchor.GetIteration());
        var associatedParameterValueSet = paramererValueSets.Find(p => p.Iid == ParameterIid?.FromShortGuid());
        associatedParameterValueSet?.Revisions.Values.ToList().ForEach(revision =>
        {
            var value = (ParameterValueSet)revision;
            this.Data.Add(new RevisionHistory()
                {
                    RevisionNumber = value.RevisionNumber.ToString(),
                    ActualValue = Double.Parse(value.ActualValue.First())
                });
        });    
        if (associatedParameterValueSet != null)
        {
            var parameter = (Parameter) associatedParameterValueSet.Container;
            this.ParameterName = parameter.ParameterType.Name;
            this.Data.Add(new RevisionHistory()
                {
                    RevisionNumber = associatedParameterValueSet.RevisionNumber.ToString(),
                    ActualValue = Double.Parse(associatedParameterValueSet.ActualValue.First())
                });
            var element = (ElementDefinition)parameter.Container;
            this.ElementName = element.Name;
        }
    }

    /// <summary>
    /// Set point label to visible
    /// </summary>
    /// <param name="pointSettings">The <see cref="ChartSeriesPointCustomizationSettings"> from the graph </param>
    protected void PreparePointLabel(ChartSeriesPointCustomizationSettings pointSettings) {
        pointSettings.PointLabel.Visible = true;
    }
}
