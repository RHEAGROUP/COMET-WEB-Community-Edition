<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@page "/SubscriptionDashboard"
@inject ISessionAnchor ISessionAnchor
@implements IDisposable

<ApplicationTemplate Title="Subscription Dashboard">
    <Body>
        <DxTreeView CssClass="m-top-10px">
            <Nodes>
                <DxTreeViewNode Name="SubscribedTableView" Text=@SubscribedTableViewTitle Expanded CssClass="color-title">
                    <Nodes>
                        <DxTreeViewNode >
                            <Template>
                                <SubscribedTable OptionSelected="@optionSelected"/>
                            </Template>
                        </DxTreeViewNode>
                    </Nodes>
                </DxTreeViewNode>
                <DxTreeViewNode Name="DomainOfExpertiseSubscriptionTableView" Text=@DomainOfExpertiseSubscriptionTableViewTitle Expanded CssClass="color-title">
                    <Nodes>
                        <DxTreeViewNode >
                            <Template>
                                <DomainOfExpertiseSubscriptionTable OptionSelected="@optionSelected"/>
                            </Template>
                        </DxTreeViewNode>
                    </Nodes>
                </DxTreeViewNode>
            </Nodes>
        </DxTreeView>
    </Body>
</ApplicationTemplate>


@code{
    /// <summary>
    /// The filter on option
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// Name of the selected Option
    /// </summary>
    private string? optionSelected { get; set; }

    /// <summary>
    /// Title for SubscribedTableView table
    /// </summary>
    public string? SubscribedTableViewTitle { get; set; }

    /// <summary>
    /// Title for DomainOfExpertiseSubscriptionTableView table
    /// </summary>
    public string? DomainOfExpertiseSubscriptionTableViewTitle { get; set; }

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.LoadTitles();
        if (!this.listeners.TryGetValue("DomainChangedEvent", out var listener)) {
            this.listeners.Add("DomainChangedEvent", CDPMessageBus.Current.Listen<DomainChangedEvent>().Subscribe(x =>
            {
                this.LoadTitles();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Load titles with current domain
    /// </summary>
    public void LoadTitles()
    {
        this.SubscribedTableViewTitle = $"Parameters {this.ISessionAnchor.CurrentDomainOfExpertise?.Name} domain subscribed to";
        this.DomainOfExpertiseSubscriptionTableViewTitle = $"Parameters owned by {this.ISessionAnchor.CurrentDomainOfExpertise?.Name} domain, subscribed to by other domains";
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Get selected filter on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        this.FilterOption = FilterOption ?? null;
        if(this.FilterOption != null)
        {
            this.optionSelected = this.ISessionAnchor.OpenIteration?.Option.ToList().Find(o => o.Iid == this.FilterOption)?.Name;
        } else
        {
            this.optionSelected = this.ISessionAnchor.OpenIteration?.Option.First().Name;
        }
    }
}