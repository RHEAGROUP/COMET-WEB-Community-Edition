<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@page "/SubscriptionDashboard/Details"
@inject ISessionAnchor ISessionAnchor
@inject IIterationService IterationService
@implements IDisposable

<ApplicationTemplate Title="Subscription Dashboard">
    <Body>
        <div class="display-flex flex-column">
            <div class="font-weight-bold font-size-20 m-top-10px">
                @ISessionAnchor.OpenIteration?.Element?.Find(element => element.Parameter.Contains(this.Parameter))?.Name - @this.Parameter?.ParameterType.Name
            </div>

            <DxDataGrid Data="@ParameterValueSets" PageSize="0">
                <DxDataGridColumn Field="@nameof(BuiltParameter.Option)" TextAlignment="DataGridTextAlign.Center"/>
                <DxDataGridColumn Field="@nameof(BuiltParameter.State)" TextAlignment="DataGridTextAlign.Center"/>
                <DxDataGridColumn Field="@nameof(BuiltParameter.PublishedValue)" Caption="Published Value" TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var publishedValue = (context as BuiltParameter)?.PublishedValue;
                            var scalevalue = this.Parameter?.Scale.ShortName;
                        }
                        @if (publishedValue != null)
                        {
                            @if (publishedValue.Count == 1)
                            {
                                <a>@publishedValue.First() @scalevalue</a>
                            }
                            else
                            {
                                @foreach(string value in publishedValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/></a>
                            }
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(BuiltParameter.ActualValue)" Caption="Actual Value" TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var actualValue = (context as BuiltParameter)?.ActualValue;
                            var scalevalue = this.Parameter?.Scale.ShortName;
                            var switchmode = (context as BuiltParameter)?.SwitchMode;
                        }
                        @if (actualValue != null)
                        {
                            @if (actualValue.Count == 1)
                            {
                                <a>@actualValue.First() @scalevalue <br/> (@switchmode)</a>
                            }
                            else
                            {
                                @foreach(string value in actualValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/> (@switchmode)</a>
                            }
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(BuiltParameter.ManualValue)" Caption="Manual Value" TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var manualValue = (context as BuiltParameter)?.ManualValue;
                            var scalevalue = this.Parameter?.Scale.ShortName;
                        }
                        @if (manualValue != null)
                        {
                            @if (manualValue.Count == 1)
                            {
                                <a>@manualValue.First() @scalevalue</a>
                            }
                            else
                            {
                                @foreach(string value in manualValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/></a>
                            }
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(BuiltParameter.ComputedValue)" Caption="Computed Value" TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var computedValue = (context as BuiltParameter)?.ComputedValue;
                            var scalevalue = this.Parameter?.Scale.ShortName;
                        }
                        @if (computedValue != null)
                        {
                            @if (computedValue.Count == 1)
                            {
                                <a>@computedValue.First() @scalevalue</a>
                            }
                            else
                            {
                                @foreach(string value in computedValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/></a>
                            }
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(BuiltParameter.ReferenceValue)" Caption="Reference Value" TextAlignment="DataGridTextAlign.Center">
                    <DisplayTemplate>
                        @{
                            var referenceValue = (context as BuiltParameter)?.ReferenceValue;
                            var scalevalue = this.Parameter?.Scale.ShortName;
                        }
                        @if (referenceValue != null)
                        {
                            @if (referenceValue.Count == 1)
                            {
                                <a>@referenceValue.First() @scalevalue</a>
                            }
                            else
                            {
                                @foreach(string value in referenceValue)
                                {
                                    <a>value</a>
                                }
                                <a>@scalevalue <br/></a>
                            }
                        }
                    </DisplayTemplate>
                </DxDataGridColumn>
            </DxDataGrid>
        </div>
</Body>
</ApplicationTemplate>

@code {
    // <summary>
    /// The modelCode of the selected Parameter
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ModelCode { get; set; }

    /// <summary>
    /// The selected <see cref="Parameter">
    /// </summary>
    public Parameter? Parameter { get; set; }

    /// <summary>
    /// List of <see cref="BuiltParameter"> in the table
    /// </summary>
    public ObservableCollection<BuiltParameter> ParameterValueSets = new ObservableCollection<BuiltParameter>();

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Get selected filter on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        this.ModelCode = ModelCode ?? null;
    }

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.LoadData();

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.ParameterValueSets.Clear();
                this.LoadData();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    private void LoadData()
    {
        this.Parameter = this.IterationService.GetCurrentDomainSubscribedParameters(this.ISessionAnchor.OpenIteration, this.ISessionAnchor.CurrentDomainOfExpertise)
            .Find(parameter => parameter.ModelCode().Equals(this.ModelCode));

        this.Parameter?.ValueSet.ForEach(parameterValueSet =>
        {
            this.ParameterValueSets.Add(new BuiltParameter()
            {
                Option = parameterValueSet.ActualOption?.Name,
                State = parameterValueSet.ActualState?.Name,
                ActualValue = parameterValueSet.ActualValue,
                PublishedValue = parameterValueSet.Published,
                ManualValue = parameterValueSet.Manual,
                ReferenceValue = parameterValueSet.Reference,
                ComputedValue = parameterValueSet.Computed,
                SwitchMode = parameterValueSet.ValueSwitch.ToString()
            });
        });
    }
}
