<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.SessionManagement
@using COMETwebapp.IterationServices
@using CDP4Dal
@using CDP4Common.EngineeringModelData

@page "/ModelDashboard"
@inject ISessionAnchor ISessionAnchor
@inject IIterationService IterationService
@inject NavigationManager NavigationManager

@implements IDisposable

<ApplicationTemplate Title="Model Dashboard">
    <Body>
        <div class="container-fluid">
            <div class="row">
                @{
                    var iteration = this.ISessionAnchor.OpenIteration;
                }
                @if(iteration != null && iteration.Option.ToList().Count > 1)
                {
                    var optionNames = new List<string>();
                    iteration.Option.OrderBy(o => o.Name).ToList().ForEach(o => optionNames.Add(o.Name));
                    
                    <div class="col-2 width-fit-content">
                        <h6>Filter on Option:</h6>
                        <DxComboBox Data="@optionNames"
                            AllowUserInput="true"
                            Value="this.optionSelected"
                            ValueChanged="@((string option) => UpdateFilterOption(option))"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                    </div>
                }
                @if (iteration != null && iteration.ActualFiniteStateList.Any())
                {
                    var actualStates = new List<string>();
                    iteration.ActualFiniteStateList.ForEach(l =>
                    {
                        l.ActualState.ForEach(s =>
                        {
                            actualStates.Add(s.Name);
                        });
                    });

                    <div class="col-2 width-fit-content">
                        <h6>Filter on State:</h6>
                        <DxComboBox Data="@actualStates.OrderBy(e => e)"
                            AllowUserInput="true"
                            NullText="--Select--"
                            Value="this.stateSelected"
                            ValueChanged="@((string actualState) => UpdateFilterState(actualState))"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                    </div>
                }
                @{
                    var participantRole = this.ISessionAnchor.GetParticipant()?.Role;
                }
                @if (participantRole != null && participantRole.Name.Equals("Model Administrator"))
                {
                    @if (iteration != null && this.ParameterTypeNames.Count != 0)
                    {
                        <div class="col-2 width-fit-content">
                            <h6>Filter on Parameter Type:</h6>
                            <DxComboBox Data="@ParameterTypeNames"
                            AllowUserInput="true"
                            NullText="--Select--"
                            Value="this.FilterParameterType"
                            ValueChanged="@((string parameterTypeName) => UpdateFilterParameterType(parameterTypeName))"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                        </div>
                    }
                }
                <div class="col"></div>
            </div>
            <div class="row">
                <ParameterDashboard FilterOption="@FilterOption" FilterState="@FilterState" FilterParameterType="@FilterParameterType"/>
            </div>
            <div class="row">
                <ElementDashboard />
            </div>
        </div>
    </Body>
</ApplicationTemplate>

@code{
    /// <summary>
    /// The filter on option
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// The filter on state
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterState { get; set; }

    /// <summary>
    /// The filter on parameter type
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public string? FilterParameterType { get; set; }

    /// <summary>
    /// Name of the option selected in the select
    /// </summary>
    private string? optionSelected { get; set; }

    /// <summary>
    /// Name of the state selected in the select
    /// </summary>
    private string? stateSelected { get; set; }

    /// <summary>
    /// Index of the active widget
    /// </summary>
    public int ActiveTabIndex { get; set; } = 0;

    /// <summary>
    /// All ParameterType names in the model
    /// </summary>
    public List<string> ParameterTypeNames = new List<string>();

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Add listener for session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.ParameterTypeNames = new List<string>();
        this.IterationService.GetParameterTypes(this.ISessionAnchor.OpenIteration).OrderBy(p => p.Name).ToList().ForEach(p => this.ParameterTypeNames.Add(p.Name));

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Get selected filter on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        var option = this.ISessionAnchor.OpenIteration?.Option.First();
        this.FilterOption = FilterOption ?? option?.Iid;
        this.FilterState = FilterState ?? null;
        this.FilterParameterType = FilterParameterType ?? null;

        var iteration = this.ISessionAnchor.OpenIteration;
        if(this.FilterOption != null)
        {
            this.optionSelected = iteration?.Option.ToList().Find(o => o.Iid == this.FilterOption)?.Name;
        }
        if (this.FilterState != null)
        {
            iteration?.ActualFiniteStateList.ForEach(l =>
            {
                this.stateSelected = l.ActualState.Find(s => s.Iid == this.FilterState)?.Name;

            });
        }
    }

    /// <summary>
    /// Navigate to the page depending on the selected <see cref="FilterOption"/>
    /// </summary>
    /// <param name="e">Event raised when any change appears in the select component</param>
    public void UpdateFilterOption(string? optionName)
    {
        this.optionSelected = optionName;
        if(this.optionSelected != null)
        {
            this.FilterOption = this.ISessionAnchor.OpenIteration?.Option.ToList().Find(o => o.Name == this.optionSelected)?.Iid;
        } else
        {
            this.FilterOption = null;
        }
        this.NavigationManager.NavigateTo($"/ModelDashboard?filteroption={this.FilterOption}&filterstate={this.FilterState}&filterparametertype={this.FilterParameterType}");
    }

    /// <summary>
    /// Navigate to the page depending on the selected <see cref="FilterState"/>
    /// </summary>
    /// <param name="e">Event raised when any change appears in the select component</param>
    public void UpdateFilterState(string? state)
    {
        this.stateSelected = state;
        if (this.stateSelected != null)
        {
            var actualStates = new List<ActualFiniteState>();
            this.ISessionAnchor.OpenIteration?.ActualFiniteStateList.ForEach(l =>
            {
                actualStates.AddRange(l.ActualState);

            });
            this.FilterState = actualStates.Find(s => s.Name == this.stateSelected)?.Iid;
        } else
        {
            this.FilterState = null;
        }
        this.NavigationManager.NavigateTo($"/ModelDashboard?filteroption={this.FilterOption}&filterstate={this.FilterState}&filterparametertype={this.FilterParameterType}");
    }

    /// <summary>
    /// Navigate to the page depending on the selected <see cref="FilterState"/>
    /// </summary>
    /// <param name="e">Event raised when any change appears in the select component</param>
    public void UpdateFilterParameterType(string? parameterTypeName)
    {
        this.FilterParameterType = parameterTypeName;
        this.NavigationManager.NavigateTo($"/ModelDashboard?filteroption={this.FilterOption}&filterstate={this.FilterState}&filterparametertype={parameterTypeName}");
    }
}



