<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@page "/ModelDashboard"
@inject ISessionAnchor ISessionAnchor
@inject NavigationManager NavigationManager

<ApplicationTemplate Title="Model Dashboard">
    <Body>
        <div class="display-flex flex-row">
            @if(ISessionAnchor.OpenIteration.Option.ToList().Count > 1)
            {
                <div class="m-left-10px">
                    <h6>Filter on options :</h6>
                    <select @bind="this.FilterOption" @oninput="UpdateFilterOption">
                        <option value="">--Select--</option>
                        @foreach(var option in ISessionAnchor.OpenIteration.Option.ToList())
                        {
                            <option value="@option.Iid">@option.Name</option>
                        }
                    </select>
                </div>
            }
            @if (ISessionAnchor.OpenIteration.ActualFiniteStateList.Any())
            {
                <div class="m-left-10px">
                    <h6>Filter on states :</h6>
                    <select @bind="this.FilterState" @oninput="UpdateFilterState">
                        <option value="">--Select--</option>
                        @foreach(var stateList in ISessionAnchor.OpenIteration.ActualFiniteStateList)
                        {
                            @foreach(var state in stateList.ActualState)
                            {
                                <option value="@state.Iid">@state.Name</option>
                            }    
                        }
                    </select>
                </div>
            }
        </div>
        <ParameterDashboard FilterOption="this.FilterOption" FilterState="this.FilterState" />

        <ElementDashboard />
    </Body>
</ApplicationTemplate>

@code{
    /// <summary>
    /// The filter on option
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// The filter on state
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterState { get; set; }

    /// <summary>
    /// Index of the active widget
    /// </summary>
    public int ActiveTabIndex { get; set; } = 0;

    /// <summary>
    /// Force component to rerender when the session is updated
    /// </summary>
    /// <param name="firstRender">Boolean defining first render</param>
    protected override void OnAfterRender(bool firstRender)
    {
        CDPMessageBus.Current.Listen<SessionEvent>().Where(x => x.Status == SessionStatus.EndUpdate).Subscribe(x =>
        {
            this.StateHasChanged();
        });
    }

    /// <summary>
    /// Get selected filter on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        this.FilterOption = FilterOption ?? null;
        this.FilterState = FilterState ?? null;
    }

    /// <summary>
    /// Navigate to the page depending on the selected <see cref="FilterOption"/>
    /// </summary>
    /// <param name="e">Event raised when any change appears in the select component</param>
    public void UpdateFilterOption(ChangeEventArgs e)
    {
        NavigationManager.NavigateTo($"/ModelDashboard?filteroption={e.Value?.ToString()}&filterstate={this.FilterState}");
    }

    /// <summary>
    /// Navigate to the page depending on the selected <see cref="FilterState"/>
    /// </summary>
    /// <param name="e">Event raised when any change appears in the select component</param>
    public void UpdateFilterState(ChangeEventArgs e)
    {
        NavigationManager.NavigateTo($"/ModelDashboard?filteroption={this.FilterOption}&filterstate={e.Value?.ToString()}");
    }
}



