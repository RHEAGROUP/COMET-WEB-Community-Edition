<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using CDP4Common.EngineeringModelData
@using CDP4Common.SiteDirectoryData
@using CDP4Dal
@using COMETwebapp.IterationServices
@using COMETwebapp.Services.SessionManagement
@using COMETwebapp.SessionManagement

@page "/ModelDashboard/ParametersDetails"
@inject ISessionService SessionService
@inject IIterationService IterationService
@implements IDisposable

<div>
    <h5>Details</h5>

    <BSTable IsBordered="false" IsStriped="true" Class="text-align-center">
        <BSTHead>
            <BSTR>
                <BSTD Class="width-15">Element</BSTD>
                <BSTD Class="width-15">Parameter</BSTD>
                <BSTD Class="width-15">Model Code</BSTD>
                <BSTD Class="width-20">Actual Value</BSTD>
                <BSTD Class="width-20">Published Value</BSTD>
                <BSTD Class="width-15">Owner</BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            @foreach(var parameterValueSet in this.ParameterValueSets)
            {
                var parameter = (ParameterBase)parameterValueSet.Container;
                var element = (ElementBase)parameter.Container;
                var modelCode = parameterValueSet.ModelCode().Split("\\");
                <BSTR AlignRow="AlignRow.Middle">
                    <BSTD>@element.Name</BSTD>
                    <BSTD>@parameter.ParameterType.Name</BSTD>
                    @if(modelCode.Count() == 1)
                    {
                        <BSTD>@modelCode[0]</BSTD>
                    } else if(modelCode.Count()  == 2)
                    {
                        if (parameter.IsOptionDependent)
                        {
                            <BSTD>
                                <div>
                                    @modelCode[0]
                                    <div>
                                        Option: @modelCode[1]
                                    </div>
                                </div>
                            </BSTD>
                        } else if (parameter.StateDependence != null)
                        {
                            <BSTD>
                                <div>
                                    @modelCode[0]
                                    <div>
                                        State: @modelCode[1]
                                    </div>
                                </div>
                            </BSTD>
                        }

                    } else if(modelCode.Count() > 2)
                    {
                        <BSTD>
                            <div>
                                @modelCode[0]
                                <div>
                                    Option: @modelCode[1]
                                </div>
                                <div>
                                    State: @modelCode[2]
                                </div>
                            </div>
                        </BSTD>
                    }
                    @if(parameter.ParameterType.NumberOfValues == 1)
                    {
                        <BSTD>
                            <ScalarParameter 
                                Value="@parameterValueSet.ActualValue.First()" 
                                Scale="@parameter.Scale?.ShortName"
                                ValueType="@parameter.ParameterType.GetType()"/>
                        </BSTD>
                        <BSTD>
                            <ScalarParameter 
                                Value="@parameterValueSet.Published.First()" 
                                Scale="@parameter.Scale?.ShortName" 
                                ValueType="@parameter.ParameterType.GetType()" />
                        </BSTD>
                    } else if(parameter.ParameterType.GetType().Equals(typeof(ArrayParameterType)))
                    {
                        <BSTD>
                            <ArrayParameter 
                                ArrayParameterType="(ArrayParameterType)parameter.ParameterType" 
                                Values="@parameterValueSet.ActualValue"/>
                        </BSTD>
                        <BSTD>
                            <ArrayParameter 
                                ArrayParameterType="(ArrayParameterType)parameter.ParameterType" 
                                Values="@parameterValueSet.Published" />
                        </BSTD>
                    } else
                    {
                        var compoundParameterType = (CompoundParameterType)parameter.ParameterType;
                        var components = compoundParameterType?.Component.ToList();
                        if (components != null && compoundParameterType != null)
                        {
                            <BSTD>
                                <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                    @foreach (var component in components)
                                    {
                                        var indexStart = 0;
                                        for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                        {
                                            indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                        }
                                        <CompoundParameter 
                                            IndexStartInParameterTypeComponent="indexStart" 
                                            Values="@parameterValueSet.ActualValue" 
                                            Component="component" />
                                    }
                                </div>                                                
                            </BSTD>
                            <BSTD>
                                <div class="p-0" style="border: 1px solid black; border-radius: 10px;">
                                    @foreach (var component in components)
                                    {
                                        var indexStart = 0;
                                        for (int i = 0; i < compoundParameterType.Component.IndexOf(component); i++)
                                        {
                                            indexStart += compoundParameterType.Component.ElementAt(i).ParameterType.NumberOfValues;

                                        }
                                        <CompoundParameter 
                                                IndexStartInParameterTypeComponent="indexStart" 
                                                Values="@parameterValueSet.Published" 
                                                Component="component"/>
                                    }
                                </div>                                               
                            </BSTD>
                        }
                    }
                    <BSTD>@parameterValueSet.Owner.ShortName</BSTD>
                </BSTR>
            }
        </BSTBody>
    </BSTable>
</div>

@code {
    /// <summary>
    /// <see cref="Guid"> of the option to filter the data 
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterOption { get; set; }

    /// <summary>
    /// <see cref="Guid"> of the state to filter the data
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterState { get; set; }

    /// <summary>
    /// Name of parameter type to filter the data
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public string? FilterParameterType { get; set; }

    /// <summary>
    /// The criteria to filter ParameterValueSet list
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Criteria { get; set; }

    /// <summary>
    /// ShortName Domain to filter ParameterValueSet list
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Domain { get; set; }

    /// <summary>
    /// List of <see cref="ParameterValueSetBase"> in the table
    /// </summary>
    public List<ParameterValueSetBase> ParameterValueSets = new List<ParameterValueSetBase>();

    /// <summary>
    /// Get selected filter on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        this.FilterOption = FilterOption ?? null;
        this.FilterState = FilterState ?? null;
        this.FilterParameterType = FilterParameterType ?? null;
        this.Criteria = Criteria ?? null;
        this.Domain = Domain ?? null;
    }

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {  
        this.InitializeParameterValueSets();

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.ParameterValueSets.Clear();
                this.InitializeParameterValueSets();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Filter the given ParameterValueSet list with criteria, domain, option and state filters
    /// </summary>
    /// <param name="parameterValueSets">List of ParameterValueSet to filter</param>
    /// <returns>The filtered list</returns>
    private List<ParameterValueSetBase> Filter(List<ParameterValueSetBase> parameterValueSets)
    {
        if(this.Domain != null)
        {
            parameterValueSets.RemoveAll(p => !p.Owner.ShortName.Equals(this.Domain));
        }

        if (this.Criteria is not null && this.Criteria.Equals("Published Parameters"))
        {
            parameterValueSets.RemoveAll(p => !p.Published.SequenceEqual(p.ActualValue));

        } else if(this.Criteria is not null && this.Criteria.Equals("Publishable Parameters"))
        {
            parameterValueSets.RemoveAll(p => p.Published.SequenceEqual(p.ActualValue));

        } else if (this.Criteria is not null && this.Criteria.Equals("Missing Values"))
        {
            parameterValueSets.RemoveAll(p => p.Published.Count(el => !el.Equals("-")) != 0);

        } else if (this.Criteria is not null && this.Criteria.Equals("Complete Values"))
        {
            parameterValueSets.RemoveAll(p => p.Published.Count(el => !el.Equals("-")) == 0);
        }

        if (this.FilterOption != null)
        {
            var nestedParameters = this.IterationService.GetNestedParameters(this.SessionService.OpenIteration, this.FilterOption);
            if (nestedParameters.Count != 0)
            {
                var valueSets = nestedParameters.Select(x => x.ValueSet).ToList();
                parameterValueSets = parameterValueSets.Where(x => valueSets.Contains(x)).ToList();
            } else
            {
                parameterValueSets.Clear();
            }
        }

        if (this.FilterState != null)
        {
            parameterValueSets.RemoveAll(d => d.ActualState == null || (d.ActualState != null && d.ActualState.Iid != this.FilterState));
        }

        if(this.FilterParameterType is not null && !this.FilterParameterType.Equals(""))
        {
            var parameterValueSetsByParameterType = this.IterationService.GetParameterValueSetsByParameterType(this.SessionService.OpenIteration, this.FilterParameterType);
            parameterValueSets.RemoveAll(d => !parameterValueSetsByParameterType.Contains(d));
        }

        return parameterValueSets;
    }

    /// <summary>
    /// Initialize the <see cref="ParameterValueSetBase"> list showed in the table
    /// </summary>
    private void InitializeParameterValueSets()
    {
        var iteration = this.SessionService.OpenIteration;
        if (this.Criteria is not null && this.Domain is not null && iteration != null)
        {
            var parameterValueSets = this.IterationService.GetParameterValueSetBase(iteration);

            this.ParameterValueSets = this.Filter(parameterValueSets).OrderBy(p => this.GetElementBase(p).Name).ToList();
        }
    }

    /// <summary>
    /// Gets the <see cref="ElementBase"> containing the given parameterValueSetBase
    /// </summary>
    private ElementBase GetElementBase(ParameterValueSetBase parameterValueSetBase)
    {
        var parameter = (ParameterBase)parameterValueSetBase.Container;
        var element = (ElementBase)parameter.Container;
        return element;
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }
}
