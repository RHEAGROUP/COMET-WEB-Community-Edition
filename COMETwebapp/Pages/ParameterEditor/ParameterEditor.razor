<!------------------------------------------------------------------------------
Copyright (c) 2022 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->

@page "/ParameterEditor"
@inject NavigationManager NavigationManager
@inject IIterationService IterationService
@inject ISessionAnchor ISessionAnchor
@implements IDisposable

<ApplicationTemplate Title="Parameter Editor">
    <Body>
        <div class="container-fluid">
            <div class="row ">
                <div class="col">
                    <h6>Filter on Element Usage Name:</h6>
                    <div class="width-fit-content">
                        <DxComboBox Data="@Elements.OrderBy(e => e.Name)"
                            TextFieldName="@nameof(ElementBase.Name)"
                            AllowUserInput="true"
                            NullText="--Select an Element--"
                            Value="this.selectedElement"
                            ValueChanged="@((ElementBase element) => this.selectedElement = element)"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                    </div>
                    <div class="@BS.Form_Check @BS.Form_Switch">
                        <BSInputCheckbox CheckedValue="@(true)" @bind-Value="this.IsEditionMode"/>
                        <BSLabel IsCheckLabel="true">Edition Mode</BSLabel>
                    </div>
                </div>
                <div class="col">
                    <div class="@BS.Form_Check @BS.Form_Switch">
                        <BSInputCheckbox CheckedValue="@(true)" @bind-Value="this.IsOwnedParameters" @onchange="@OnOwnerFilterChange"/>
                        <BSLabel IsCheckLabel="true">Only Parameters owned by @ISessionAnchor.CurrentDomainOfExpertise?.Name domain</BSLabel>
                    </div>
                </div>
            </div>
            <div class="row">
                <ParameterTree Elements="@Filter(this.Elements.OrderBy(e => e.Name))" IsEditionMode="@IsEditionMode" IsOwnedParameters="@IsOwnedParameters"/>
            </div>
        </div>
    </Body>
</ApplicationTemplate>


@code{
    /// <summary>
    /// The selected <see cref="ElementBase"> to filter
    /// </summary>
    private ElementBase? selectedElement { get; set; }

    /// <summary>
    /// All <see cref="ElementBase"> of the iteration
    /// </summary>
    public List<ElementBase> Elements { get; set; } = new List<ElementBase>();

    /// <summary>
    /// Sets edition mode activate
    /// </summary>
    private bool IsEditionMode { get; set; } = true;

    /// <summary>
    /// Sets if only parameters owned by the active domain are shown
    /// </summary>
    private bool IsOwnedParameters { get; set; } = true;

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.Elements.Clear();
        this.InitializeElements();

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.Elements.Clear();
                this.InitializeElements();
                this.StateHasChanged();
            }));
        }

        if (!this.listeners.TryGetValue("DomainChangedEvent", out listener)) {
            this.listeners.Add("DomainChangedEvent", CDPMessageBus.Current.Listen<DomainChangedEvent>().Subscribe(x =>
            {
                this.Elements.Clear();
                this.InitializeElements();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Initialize <see cref="ElementBase"> list
    /// </summary>
    private void InitializeElements()
    {
        var iteration = this.ISessionAnchor.OpenIteration;
        if(iteration != null)
        {
            if(this.IsOwnedParameters == true)
            {
                if(iteration.TopElement.Parameter.FindAll(p => p.Owner == this.ISessionAnchor.CurrentDomainOfExpertise).Count != 0)
                {
                    this.Elements.Add(iteration.TopElement);
                }
                iteration.Element.ForEach(e =>
                {
                    e.ContainedElement.ForEach(containedElement =>
                    {
                        if(containedElement.ParameterOverride.Count == 0)
                        {
                            if(containedElement.ElementDefinition.Parameter.FindAll(p => p.Owner == this.ISessionAnchor.CurrentDomainOfExpertise).Count != 0)
                            {
                                this.Elements.Add(containedElement);
                            }
                        } else if (containedElement.ParameterOverride.FindAll(p => p.Owner == this.ISessionAnchor.CurrentDomainOfExpertise).Count != 0)
                        {
                            this.Elements.Add(containedElement);
                        }
                    });
                });
            } else
            {
                this.Elements.Add(iteration.TopElement);
                iteration.Element.ForEach(e => this.Elements.AddRange(e.ContainedElement));
            }
        }
    }

    /// <summary>
    /// Filter <see cref="ElementBase"> to show in the tree
    /// </summary>
    /// <param name="elements"></param>
    /// <returns></returns>
    public List<ElementBase> Filter(IEnumerable<ElementBase> elements)
    {
        if(this.selectedElement != null)
        {
            return elements.ToList().FindAll(e => e.Iid == this.selectedElement?.Iid);
        } else
        {
            return elements.ToList();
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    public void OnOwnerFilterChange(ChangeEventArgs e)
    {
        this.Elements.Clear();
        this.InitializeElements();
    }
}

