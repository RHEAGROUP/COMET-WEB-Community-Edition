<!------------------------------------------------------------------------------
Copyright (c) 2023 RHEA System S.A.

    Authors: Justine Veirier d'aiguebonne, Sam Gerené, Alex Vorobiev, Alexander van Delft

    This file is part of COMET WEB Community Edition
     The COMET WEB Community Edition is the RHEA Web Application implementation of ECSS-E-TM-10-25 Annex A and Annex C.

    The COMET WEB Community Edition is free software; you can redistribute it and/or
    modify it under the terms of the GNU Affero General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    The COMET WEB Community Edition is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see http://www.gnu.org/licenses/.
------------------------------------------------------------------------------->
@using COMETwebapp.IterationServices
@using COMETwebapp.SessionManagement
@using CDP4Dal
@using CDP4Dal.Events
@using CDP4Common.EngineeringModelData
@using COMETwebapp.Extensions
@using COMETwebapp.Services.SessionManagement

@page "/ParameterEditor"
@inject NavigationManager NavigationManager
@inject IIterationService IterationService
@inject ISessionService SessionService

@implements IDisposable

<SingleIterationApplicationTemplate>
    <Body>
        <div class="container-fluid">
            <div class="row ">
                <div class="col">
                    <h6>Filter on Element Usage Name:</h6>
                    <div class="width-fit-content">
                        <DxComboBox Data="@Filter(Elements.OrderBy(e => e.Name).ToList())"
                            TextFieldName="@nameof(ElementBase.Name)"
                            AllowUserInput="true"
                            NullText="--Select an Element--"
                            Value="this.selectedElement"
                            ValueChanged="@((ElementBase element) => this.selectedElement = element)"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                    </div>
                </div>
                <div class="col">
                    <h6>Filter on Parameter Type:</h6>
                    <div class="width-fit-content">
                        <DxComboBox Data="@ParameterTypeNames"
                            AllowUserInput="true"
                            NullText="--Select--"
                            Value="this.parameterTypeSelected"
                            ValueChanged="@((string parameterTypeName) => this.OnParameterFilterChange(parameterTypeName))"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                    </div>
                </div>  
                @{
                    var iteration = this.SessionService.DefaultIteration;
                }
                @if (iteration != null && iteration.Option.ToList().Count > 1)
                {
                    var optionNames = new List<string>();
                    iteration.Option.OrderBy(o => o.Name).ToList().ForEach(o => optionNames.Add(o.Name));
                    <div class="col">
                        <h6>Filter on Option:</h6>
                        <div class="width-fit-content">
                            <DxComboBox Data="@optionNames"
                                AllowUserInput="true"
                                Value="this.optionSelected"
                                ValueChanged="@((string option) => OnOptionFilterChange(option))"
                                FilteringMode="DataGridFilteringMode.Contains"/>
                        </div>
                    </div>
                }
                @if (iteration != null && iteration.ActualFiniteStateList.Any())
                {
                    var actualStates = new List<string>();
                    iteration.ActualFiniteStateList.ForEach(l =>
                    {
                        l.ActualState.ForEach(s =>
                        {
                            actualStates.Add(s.Name);
                        });
                    });
                    <div class="col">
                        <h6>Filter on State:</h6>
                        <DxComboBox Data="@actualStates.OrderBy(e => e)"
                            AllowUserInput="true"
                            NullText="--Select--"
                            Value="this.stateSelected"
                            ValueChanged="@((string actualState) => OnStateFilterChange(actualState))"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="DataGridFilteringMode.Contains"/>
                    </div>
                }
            </div>
            <div class="row m-4">
                <div class="col">
                    <div class="BS.Form_Check BS.Form_Switch">
                        <BSInputCheckbox CheckedValue="@(true)" Value="@this.IsOwnedParameters" @onchange="@OnOwnerFilterChange"/>
                        <BSLabel IsCheckLabel="true">Only Parameters owned by @this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)?.Name domain</BSLabel>
                    </div>
                </div>
            </div>
            <div class="row">
                <ParameterTable Elements="@Filter(this.Elements.OrderBy(e => e.Name).ToList())" 
                    IsOwnedParameters="@IsOwnedParameters"
                    ParameterTypeSelected="@parameterTypeSelected" 
                    OptionSelected="@optionSelected"
                    StateSelected="@stateSelected" />
            </div>
        </div>
    </Body>
</SingleIterationApplicationTemplate>


@code{
    /// <summary>
    /// The filter on option
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterOption { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? FilterElementBase { get; set; }

    /// <summary>
    /// The selected <see cref="ElementBase"> to filter
    /// </summary>
    private ElementBase? selectedElement { get; set; }

    /// <summary>
    /// All <see cref="ElementBase"> of the iteration
    /// </summary>
    public List<ElementBase> Elements { get; set; } = new List<ElementBase>();

    /// <summary>
    /// Sets if only parameters owned by the active domain are shown
    /// </summary>
    private bool IsOwnedParameters { get; set; } = true;

    /// <summary>
    /// Name of the parameter type selected
    /// </summary>
    private string? parameterTypeSelected { get; set; }

    /// <summary>
    /// Name of the option selected
    /// </summary>
    private string? optionSelected { get; set; }

    /// <summary>
    /// Name of the state selected
    /// </summary>
    private string? stateSelected { get; set; }

    /// <summary>
    /// Listeners for the components to update it with ISession
    /// </summary>
    private Dictionary<string, IDisposable> listeners = new Dictionary<string, IDisposable>();

    /// <summary>
    /// All ParameterType names in the model
    /// </summary>
    public List<string> ParameterTypeNames = new List<string>();

    /// <summary>
    /// Initialize component at first render and after session update
    /// </summary>
    protected override void OnInitialized()
    {
        this.Elements.Clear();
        this.InitializeElements();

        this.ParameterTypeNames = new List<string>();
        this.IterationService.GetParameterTypes(this.SessionService.DefaultIteration).OrderBy(p => p.Name).ToList().ForEach(p => this.ParameterTypeNames.Add(p.Name));

        if (!this.listeners.TryGetValue("UpToDate", out var listener))
        {
            this.listeners.Add("UpToDate", CDPMessageBus.Current.Listen<SessionStateKind>().Where(x => x == SessionStateKind.UpToDate).Subscribe(x =>
            {
                this.Elements.Clear();
                this.InitializeElements();
                this.StateHasChanged();
            }));
        }

        if (!this.listeners.TryGetValue("DomainChangedEvent", out listener)) {
            this.listeners.Add("DomainChangedEvent", CDPMessageBus.Current.Listen<DomainChangedEvent>().Subscribe(x =>
            {
                this.Elements.Clear();
                this.InitializeElements();
                this.StateHasChanged();
            }));
        }
    }

    /// <summary>
    /// Get selected filter on url page
    /// </summary>
    protected override void OnParametersSet()
    {
        this.FilterOption = FilterOption ?? null;
        if(this.FilterOption != null)
        {
            this.optionSelected = this.SessionService.DefaultIteration?.Option.ToList().Find(o => o.Iid == this.FilterOption)?.Name;
        } else
        {
            this.optionSelected = this.SessionService.DefaultIteration?.Option.First().Name;
        }

        this.FilterElementBase = FilterElementBase ?? null;
        if(this.FilterElementBase != null)
        {
            this.selectedElement = this.Elements.Find(e => e.Iid == this.FilterElementBase);
        }
    }

    /// <summary>
    /// Initialize <see cref="ElementBase"> list
    /// </summary>
    private void InitializeElements()
    {
        var iteration = this.SessionService.DefaultIteration;
        if(iteration != null)
        {
            if(this.IsOwnedParameters == true)
            {
                if(iteration.TopElement != null && iteration.TopElement.Parameter.FindAll(p => p.Owner == this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)).Count != 0)
                {
                    this.Elements.Add(iteration.TopElement);
                }
                iteration.Element.ForEach(e =>
                {
                    e.ContainedElement.ForEach(containedElement =>
                    {
                        if (containedElement.ParameterOverride.Count == 0)
                        {
                            if (containedElement.ElementDefinition.Parameter.FindAll(p => p.Owner == this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)).Count != 0)
                            {
                                this.Elements.Add(containedElement);
                            }
                        }
                        else
                        {
                            if (containedElement.ParameterOverride.FindAll(p => p.Owner == this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)).Count != 0)
                            {
                                this.Elements.Add(containedElement);
                            }
                            if(!this.Elements.Contains(containedElement) && containedElement.ElementDefinition.Parameter.FindAll(p => p.Owner == this.SessionService.GetDomainOfExpertise(this.SessionService.DefaultIteration)).Count != 0)
                            {
                                this.Elements.Add(containedElement);
                            }
                        }
                    });
                });
            } else
            {
                if(iteration.TopElement != null)
                {
                    this.Elements.Add(iteration.TopElement);
                }
                iteration.Element.ForEach(e => this.Elements.AddRange(e.ContainedElement));
            }
        }
    }

    /// <summary>
    /// Filter <see cref="ElementBase"> to show in the tree
    /// </summary>
    /// <param name="elements"></param>
    /// <returns></returns>
    public List<ElementBase> Filter(List<ElementBase> elements)
    {
        if(this.parameterTypeSelected != null)
        {
            var elementsToRemove = new List<ElementBase>();
            elements.ForEach(e =>
            {
                if (e.GetType().Equals(typeof(ElementDefinition)))
                {
                    var elementDefinition = (ElementDefinition)e;
                    if(elementDefinition.Parameter.FindAll(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count == 0)
                    {
                        elementsToRemove.Add(e);
                    }
                } else if (e.GetType().Equals(typeof(ElementUsage)))
                {
                    var elementUsage = (ElementUsage)e;
                    if (elementUsage.ParameterOverride.Count == 0 && elementUsage.ElementDefinition.Parameter.FindAll(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count == 0)
                    {
                        elementsToRemove.Add(e);
                    }
                    else if (elementUsage.ParameterOverride.Count != 0)
                    {
                        if (elementUsage.ParameterOverride.FindAll(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count == 0 &&
                            elementUsage.ElementDefinition.Parameter.FindAll(p => p.ParameterType.Name.Equals(this.parameterTypeSelected)).Count == 0)
                        {
                            elementsToRemove.Add(e);
                        }
                    }
                }
            });
            elements.RemoveAll(e => elementsToRemove.Contains(e));
        }

        if(this.optionSelected != null)
        {
            var option = this.SessionService.DefaultIteration?.Option.ToList().Find(option => option.Name == this.optionSelected);
            var nestedElements = this.SessionService.DefaultIteration.QueryNestedElements(option).ToList();

            var associatedElements = new List<ElementUsage>();
            nestedElements.ForEach(element =>
            {
                associatedElements.AddRange(element.ElementUsage);
            });
            associatedElements = associatedElements.Distinct().ToList();

            var elementsToRemove = new List<ElementBase>();
            elements.ForEach(e =>
            {
                if (e.GetType().Equals(typeof(ElementUsage)) && !associatedElements.Contains(e))
                {
                    elementsToRemove.Add(e);
                }
            });
            elements.RemoveAll(e => elementsToRemove.Contains(e));
        }

        if (this.stateSelected != null)
        {
            var elementsToRemove = new List<ElementBase>();
            elements.ForEach(e =>
            {
                if (e.GetType().Equals(typeof(ElementDefinition)))
                {
                    var elementDefinition = (ElementDefinition)e;
                    var actualStates = new List<ActualFiniteState>();
                    elementDefinition.Parameter.ForEach(p =>
                    {
                        p.ValueSet.ForEach(v =>
                        {
                            if (v.ActualState != null && v.ActualState.Name.Equals(this.stateSelected))
                            {
                                actualStates.Add(v.ActualState);
                            }
                        });
                    });
                    if (actualStates.Count == 0)
                    {
                        elementsToRemove.Add(e);
                    }
                }
                else if (e.GetType().Equals(typeof(ElementUsage)))
                {
                    var elementUsage = (ElementUsage)e;
                    var actualStates = new List<ActualFiniteState>();
                    if (elementUsage.ParameterOverride.Count == 0)
                    {
                        elementUsage.ElementDefinition.Parameter.ForEach(p =>
                        {
                            p.ValueSet.ForEach(v =>
                            {
                                if (v.ActualState != null && v.ActualState.Name.Equals(this.stateSelected))
                                {
                                    actualStates.Add(v.ActualState);
                                }
                            });
                        });
                        if (actualStates.Count == 0)
                        {
                            elementsToRemove.Add(e);
                        }
                    }
                    else if (elementUsage.ParameterOverride.Count != 0)
                    {
                        elementUsage.ParameterOverride.ForEach(p =>
                        {
                            p.ValueSet.ForEach(v =>
                            {
                                if (v.ActualState != null && v.ActualState.Name.Equals(this.stateSelected))
                                {
                                    actualStates.Add(v.ActualState);
                                }
                            });
                        });
                        elementUsage.ElementDefinition.Parameter.ForEach(p =>
                        {
                            p.ValueSet.ForEach(v =>
                            {
                                if (v.ActualState != null && v.ActualState.Name.Equals(this.stateSelected))
                                {
                                    actualStates.Add(v.ActualState);
                                }
                            });
                        });
                        if (actualStates.Count == 0)
                        {
                            elementsToRemove.Add(e);
                        }
                    }
                }
            });
            elements.RemoveAll(e => elementsToRemove.Contains(e));
        }

        if(this.selectedElement != null)
        {
            return elements.FindAll(e => e.Iid == this.selectedElement?.Iid);
        } else
        {
            return elements;
        }
    }

    /// <summary>
    /// Stop and clear listeners of the component
    /// </summary>
    public void Dispose()
    {
        this.listeners.Values.ToList().ForEach(l => l.Dispose());
        this.listeners.Clear();
    }

    /// <summary>
    /// Updates Elements list when a filter for owner is selected
    /// </summary>
    /// <param name="e"><see cref="ChangeEventArgs"> from the selector</param>
    public void OnOwnerFilterChange(ChangeEventArgs e)
    {
        this.Elements.Clear();
        this.InitializeElements();
    }

    /// <summary>
    /// Updates Elements list when a filter for parameter type is selected
    /// </summary>
    /// <param name="e">Name of the ParameterType selected</param>
    public void OnParameterFilterChange(string? parameterType)
    {
        this.parameterTypeSelected = parameterType;
        this.Elements.Clear();
        this.InitializeElements();
    }

    /// <summary>
    /// Updates Elements list when a filter for option is selected
    /// </summary>
    /// <param name="e">Name of the Option selected</param>
    public void OnOptionFilterChange(string? option)
    {
        this.optionSelected =   option;
        if(this.optionSelected != null)
        {
            this.FilterOption = this.SessionService.DefaultIteration?.Option.ToList().Find(o => o.Name == option)?.Iid;
        } else
        {
            this.FilterOption = null;
        }
        this.NavigationManager.NavigateTo($"/ParameterEditor?filteroption={this.FilterOption}");
    }

    /// <summary>
    /// Updates Elements list when a filter for parameter typestate is selected
    /// </summary>
    /// <param name="e">Name of the State selected</param>
    public void OnStateFilterChange(string? state)
    {
        this.stateSelected = state;
        this.Elements.Clear();
        this.InitializeElements();
    }
}

